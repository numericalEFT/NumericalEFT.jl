        - """
        - Monte Carlo Calculator for Diagrams
        - """
        - module MonteCarlo
        - 
        - export montecarlo, Configuration, Diagram, FermiK, BoseK, Tau, TauPair
        - 
        - using Random
        - using LinearAlgebra
        - using StaticArrays, Printf, Dates
        - using ..Utility
        - const RNG = Random.GLOBAL_RNG
        - 
        - include("variable.jl")
        - include("sampler.jl")
        - include("updates.jl")
        - 
        - function montecarlo(config::Configuration, integrand::Function, measure::Function; timer=nothing)
        -     ##############  initialization  ################################
        - 
        -     # don't forget to initialize the diagram weight
        0     config.absWeight = integrand(config)
        - 
        0     if timer === nothing
        -         printTime = 10
      256         timer = [StopWatch(printTime, printStatus)]
        -     end
        - 
      192     updates = [increaseOrder, decreaseOrder]
        0     for var in config.var
        -         # changeVar should be call more often if there are more variables
      736         append!(updates, [changeVar, ])
        -     end
        - 
        0     for diag in config.diagrams
     1024         diag.propose = zeros(Float64, length(updates)) .+ 1.0e-8
        -         # add a small number so that the ratio propose/accept=0 if there is no such update proposed and accepted
      512         diag.accept = zeros(Float64, length(updates)) 
        -     end
        - 
        -     ########### MC simulation ##################################
      608     printstyled("PID $(config.pid) Start Simulation ...\n", color=:red)
        0     startTime = time()
        - 
        0     for i = 1:config.totalStep
        0         config.step += 1
        0         config.curr.visitedSteps += 1
    32256         _update = rand(config.rng, updates) # randomly select an update
        0         _update(config, integrand)
        0         (i % 10 == 0 && i >= config.totalStep / 100) && measure(config)
        0         if i % 1000 == 0
        0             for t in timer
        0                 check(t, config)
        -             end
        0             if i > 1000_1000 && i % 1000_1000 == 0
        0                 reweight(config)
        -             end
        -         end
        -     end
        - 
        0     printStatus(config)
     1568     printstyled("PID $(config.pid) End Simulation. Cost $(time() - startTime) seconds.\n\n", color=:red)
        - end
        - 
        - function reweight(config)
        -     # config.diagrams[1].reWeightFactor = 1.0
        -     # config.diagrams[2].reWeightFactor = 8.0
        0     avgstep = sum([g.visitedSteps for g in config.diagrams]) / length(config.diagrams)
        0     for g in config.diagrams
        0         if g.visitedSteps > 10000
        -             # g.reWeightFactor=g.reWeightFactor*0.5+totalstep/g.visitedSteps*0.5
        0             g.reWeightFactor *= avgstep / g.visitedSteps
        -         end
        -     end
        - end
        - 
        - function printStatus(config)
        -     barbar = "====================================================================================="
        -     bar = "-------------------------------------------------------------------------------------"
        - 
      256     println(barbar)
       64     printstyled(Dates.now(), color=:green)
        0     println("\nStep:", config.step)
       64     println(bar)
        - 
      384     name = ["increaseOrder", "decreaseOrder"]
        0     for (vi, var) in enumerate(config.var)
        -         # typeof(Var) is something like QuantumStatistics.MonteCarlo.Tau, only the last block is the type name
    11120         typestr = "$(typeof(var))"
     2304         typestr = split(typestr, ".")[end]
     4032         append!(name, ["change_$typestr", ])
        -     end
        -     totalproposed = 0.0
        - 
        0     for num = 1:length(name)
      960         @printf(
        -             "%-20s %12s %12s %12s\n",
        -             String(name[num]),
        -             "Proposed",
        -             "Accepted",
        -             "Ratio  "
        -         )
        0         for (idx, diag) in enumerate(config.diagrams)
     3840             @printf(
        -                 "    Order%2d:            %11.6f%% %11.6f%% %12.6f\n",
        -                 diag.id,
        -                 diag.propose[num] / config.step * 100.0,
        -                 diag.accept[num] / config.step * 100.0,
        -                 diag.accept[num] / diag.propose[num]
        -             )
        0             totalproposed += diag.propose[num]
        -         end
      320         println(bar)
        -     end
        0     printstyled("Diagrams            Visited      ReWeight\n", color=:yellow)
        0     for (idx, diag) in enumerate(config.diagrams)
      512         @printf(
        -                 "  Order%2d:     %12i %12.6f\n",
        -                 diag.id,
        -                 diag.visitedSteps,
        -                 diag.reWeightFactor
        -             )
        -     end
       64     println(bar)
     2560     printstyled("Total Proposed: $(totalproposed / config.step * 100.0)%\n", color=:yellow)
        -     # printstyled(progressBar(round(config.step / config.blockStep, digits=2), config.totalBlock + 1), color=:green)
        0     printstyled(progressBar(config.step, config.totalStep), color=:green)
      592     println()
        - end
        - 
        - """
        -     progressBar(step, total)
        - 
        - Return string of progressBar (step/total*100%)
        - """
        - function progressBar(step, total)
        -     barWidth = 70
        0     percent = round(step / total * 100.0, digits=2)
        -     str = "["
        0     pos = barWidth * percent / 100.0
        0     for i = 1:barWidth
        0         if i <= pos
    29072             str *= "â–ˆ"
        -         else
     7152             str *= " "
        -         end
        -     end
     4416     str *= "] $step/$total=$percent%"
        0     return str
        - end
        - 
        - end
