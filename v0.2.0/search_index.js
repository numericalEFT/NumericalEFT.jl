var documenterSearchIndex = {"docs":
[{"location":"lib/compositegrids/#Composite-1D-Grids","page":"Composite 1D Grids","title":"Composite 1D Grids","text":"","category":"section"},{"location":"lib/compositegrids/","page":"Composite 1D Grids","title":"Composite 1D Grids","text":"Modules = [NumericalEFT.CompositeGrids]","category":"page"},{"location":"lib/compositegrids/#Basic-Grids","page":"Composite 1D Grids","title":"Basic Grids","text":"","category":"section"},{"location":"lib/compositegrids/","page":"Composite 1D Grids","title":"Composite 1D Grids","text":"Modules = [CompositeGrids.SimpleG]","category":"page"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.SimpleG","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.SimpleG","text":"Basic grids including common grids like arbitrary grids, uniform grids, log grids, and optimized grids like barycheb for interpolation and gausslegendre for integration.\n\n\n\n\n\n","category":"module"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.SimpleG.AbstractGrid","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.SimpleG.AbstractGrid","text":"All Grids are derived from AbstractGrid; ClosedGrid has bound[1], bound[2] == grid[1], grid[end], while OpenGrid has bound[1]<grid[1]<grid[end]<bound[2]\n\n\n\n\n\n","category":"type"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.SimpleG.Arbitrary","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.SimpleG.Arbitrary","text":"struct Arbitrary{T<:AbstractFloat} <: ClosedGrid\n\nArbitrary grid generated from given sorted grid.\n\n#Members:\n\nbound : boundary of the grid\nsize : number of grid points\ngrid : grid points\nweight : integration weight\n\n#Constructor:\n\nfunction Arbitrary{T}(grid) where {T<:AbstractFloat}\n\n\n\n\n\n","category":"type"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.SimpleG.BaryCheb","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.SimpleG.BaryCheb","text":"struct BaryCheb{T<:AbstractFloat} <: OpenGrid\n\nBaryCheb grid generated on [bound[1], bound[2]] with order N.\n\n#Members:\n\nbound : boundary of the grid\nsize : number of grid points\ngrid : grid points\nweight : interpolation weight\n\n#Constructor:\n\nfunction BaryCheb{T}(bound, size) where {T<:AbstractFloat}\n\n\n\n\n\n","category":"type"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.SimpleG.GaussLegendre","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.SimpleG.GaussLegendre","text":"struct GaussLegendre{T<:AbstractFloat} <: OpenGrid\n\nGaussLegendre grid generated on [bound[1], bound[2]] with order N.\n\n#Members:\n\nbound : boundary of the grid\nsize : number of grid points\ngrid : grid points\nweight : integration weight\n\n#Constructor:\n\nfunction GaussLegendre{T}(bound, size) where {T<:AbstractFloat}\n\n\n\n\n\n","category":"type"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.SimpleG.Log","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.SimpleG.Log","text":"struct Log{T<:AbstractFloat} <: ClosedGrid\n\nLog grid generated on [bound[1], bound[2]] with N grid points. Minimal interval is set to be minterval. Dense to sparse if d2s, vice versa.\n\nOn [0, 1], a typical d2s Log grid looks like [0, λ^(N-1), ..., λ^2, λ, 1].\n\n#Members:\n\nbound : boundary of the grid\nsize : number of grid points\ngrid : grid points\nweight : integration weight\nλ : scale parameter\nd2s : dense to sparse or not\n\n#Constructor:\n\nfunction Log{T}(bound, size, minterval, d2s) where {T<:AbstractFloat}\n\n\n\n\n\n","category":"type"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.SimpleG.Uniform","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.SimpleG.Uniform","text":"struct Uniform{T<:AbstractFloat} <: ClosedGrid\n\nUniform grid generated on [bound[1], bound[2]] with N points\n\n#Members:\n\nbound : boundary of the grid\nsize : number of grid points\ngrid : grid points\nweight : integration weight\n\n#Constructor:\n\nfunction Uniform{T}(bound, size) where {T<:AbstractFloat}\n\n\n\n\n\n","category":"type"},{"location":"lib/compositegrids/#Base.floor-Tuple{NumericalEFT.CompositeGrids.SimpleG.AbstractGrid, Any}","page":"Composite 1D Grids","title":"Base.floor","text":"function Base.floor(grid::AbstractGrid, x) #where {T}\n\nuse basic searchsorted function to find the index of largest grid point smaller than x.\n\nreturn 1 for x<grid[1] and grid.size-1 for x>grid[end].\n\n\n\n\n\n","category":"method"},{"location":"lib/compositegrids/#Base.floor-Union{Tuple{T}, Tuple{NumericalEFT.CompositeGrids.SimpleG.Log{T}, Any}} where T","page":"Composite 1D Grids","title":"Base.floor","text":"function Base.floor(grid::Log{T}, x) where {T}\n\nfind the index of largest grid point smaller than x.\n\nreturn 1 for x<grid[1] and grid.size-1 for x>grid[end].\n\n\n\n\n\n","category":"method"},{"location":"lib/compositegrids/#Base.floor-Union{Tuple{T}, Tuple{NumericalEFT.CompositeGrids.SimpleG.Uniform{T}, Any}} where T","page":"Composite 1D Grids","title":"Base.floor","text":"function Base.floor(grid::Uniform{T}, x) where {T}\n\nfind the index of largest grid point smaller than x.\n\nreturn 1 for x<grid[1] and grid.size-1 for x>grid[end].\n\n\n\n\n\n","category":"method"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.SimpleG.barycheb-NTuple{5, Any}","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.SimpleG.barycheb","text":"function barycheb(n, x, f, wc, xc)\n\nBarycentric Lagrange interpolation at Chebyshev nodes Reference: Berrut, J.P. and Trefethen, L.N., 2004. Barycentric lagrange interpolation. SIAM review, 46(3), pp.501-517.\n\nArguments\n\nn: order of the Chebyshev interpolation\nx: coordinate to interpolate\nf: array of size n, function at the Chebyshev nodes\nwc: array of size n, Barycentric Lagrange interpolation weights\nxc: array of size n, coordinates of Chebyshev nodes\n\nReturns\n\nInterpolation result\n\n\n\n\n\n","category":"method"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.SimpleG.barychebinit-Tuple{Any}","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.SimpleG.barychebinit","text":"barychebinit(n)\n\nGet Chebyshev nodes of first kind and corresponding barycentric Lagrange interpolation weights.  Reference: Berrut, J.P. and Trefethen, L.N., 2004. Barycentric lagrange interpolation. SIAM review, 46(3), pp.501-517.\n\nArguments\n\nn: order of the Chebyshev interpolation\n\nReturns\n\nChebyshev nodes\nBarycentric Lagrange interpolation weights\n\n\n\n\n\n","category":"method"},{"location":"lib/compositegrids/#Composite-Grids","page":"Composite 1D Grids","title":"Composite Grids","text":"","category":"section"},{"location":"lib/compositegrids/","page":"Composite 1D Grids","title":"Composite 1D Grids","text":"Modules = [CompositeGrids.CompositeG]","category":"page"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.CompositeG","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.CompositeG","text":"Composite grid that has tree structure. The whole interval is first divided by a panel grid, then each interval of a panel grid is divided by a smaller grid in subgrids. Subgrid could also be composite grid.\n\n\n\n\n\n","category":"module"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.CompositeG.Composite","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.CompositeG.Composite","text":"struct Composite{T<:AbstractFloat,PG,SG} <: SimpleG.ClosedGrid\n\nComposite grid generated with panel grid of type PG and subgrids of type SG. PG should always be ClosedGrid, while SG could be any grid.\n\n#Members:\n\nbound : boundary of the grid\nsize : number of grid points\ngrid : grid points\npanel : panel grid\nsubgrids : a vector of subgrids\ninits : index of the first grid point of a subgrid on the whole grid\n\n#Constructor:\n\nfunction Composite{T,PG,SG}(panel, subgrids) where {T<:AbstractFloat,PG,SG}\n\ncreate Composite grid from panel and subgrids. if the boundary grid point of two neighbor subgrids are too close, they will be combined in the whole grid.\n\n\n\n\n\n","category":"type"},{"location":"lib/compositegrids/#Base.floor-Union{Tuple{SG}, Tuple{PG}, Tuple{T}, Tuple{NumericalEFT.CompositeGrids.CompositeG.Composite{T, PG, SG}, Any}} where {T, PG, SG}","page":"Composite 1D Grids","title":"Base.floor","text":"function Base.floor(grid::Composite{T,PG,SG}, x) where {T,PG,SG}\n\nfirst find the corresponding subgrid by flooring on panel grid, then floor on subgrid and collect result. give the floor result on the whole grid. if floor on panel grid is needed, simply call floor(grid.panel, x).\n\nreturn 1 for x<grid[1] and grid.size-1 for x>grid[end].\n\n\n\n\n\n","category":"method"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.CompositeG.CompositeLogGrid","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.CompositeG.CompositeLogGrid","text":"function CompositeLogGrid(type, bound, N, minterval, d2s, order, T=Float64)\n\ncreate a composite grid with a Log grid as panel and subgrids of selected type.\n\n#Members:\n\ntype : type of the subgrids, currently in [:cheb, :gauss, :uniform]\nbound : boundary of the grid\nN : number of grid points of panel grid\nminterval : minimum interval of panel grid\nd2s : panel grid is dense to sparse or not\norder : number of grid points of subgrid\n\n\n\n\n\n","category":"function"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.CompositeG.LogDensedGrid","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.CompositeG.LogDensedGrid","text":"function LogDensedGrid(type, bound, dense_at, N, minterval, order, T=Float64)\n\ncreate a composite grid of CompositeLogGrid as subgrids. the grid is densed at selected points in dense_at, which in the real situation could be [kF,] for fermi k grid and [0, 2kF] for bose k grid, etc. if two densed point is too close to each other, they will be combined.\n\n#Members:\n\ntype : type of the subgrid of subgrid, currently in [:cheb, :gauss, :uniform]\nbound : boundary of the grid\ndense_at : list of points that requires densed grid\nN : number of grid points of panel grid\nminterval : minimum interval of panel grid\norder : number of grid points of subgrid\n\n\n\n\n\n","category":"function"},{"location":"lib/compositegrids/#Interpolation-and-Integration","page":"Composite 1D Grids","title":"Interpolation and Integration","text":"","category":"section"},{"location":"lib/compositegrids/","page":"Composite 1D Grids","title":"Composite 1D Grids","text":"Modules = [CompositeGrids.Interp]","category":"page"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.Interp","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.Interp","text":"Provide interpolation and integration.\n\n\n\n\n\n","category":"module"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.Interp.dataslice-Tuple{Any, Int64, Any}","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.Interp.dataslice","text":"function dataslice(data, axes, indices)\n\nReturn a view of data sliced on given axes with given indices. Works like view(data, (:, ..., :, i1:f1,  :, ..., in:fn, :, ..., :)). Type unstable unless slice dims are constant.\n\n#Members:\n\ndata: data to be sliced.\naxes: axes to be sliced. accept Int or NTuple{DIM, Int} for single or multiple axes. when omitted, assume all axes.\nindices: indices of slicing. accept UnitRange{Int} or Vector of UnitRange{Int} like 2:8 or [2:8, 3:7]\n\n\n\n\n\n","category":"method"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.Interp.differentiate1D-Union{Tuple{T}, Tuple{Any, T, Any}} where T","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.Interp.differentiate1D","text":"function differentiate1D(data, xgrid, x; axis=1)\n\ncalculate integration of data[i] on xgrid. For 1D data, return a number; for multiple dimension, reduce the given axis.\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\nx: point to differentiate\naxis: axis to be differentiated in data\n\n\n\n\n\n","category":"method"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.Interp.findneighbor-Union{Tuple{T}, Tuple{T, Any}} where T","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.Interp.findneighbor","text":"function findneighbor(xgrid::T, x; method=:default) where {T}\n\nFind neighbor grid points and related information for extrapolating the value of x on xgrid.\n\n#Members:\n\nxgrid: grid to be interpolated\nx: value to be interpolated\nmethod: :default use optimized method, :linear use linear interp.\n\n\n\n\n\n","category":"method"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.Interp.integrate1D-Tuple{NumericalEFT.CompositeGrids.Interp.ChebIntegrate, Any, Any}","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.Interp.integrate1D","text":"function integrate1D(::ChebIntegrate, data, xgrid)\n\ncalculate integration of data[i] on xgrid works for grids that have integration weight stored\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\n\n\n\n\n\n","category":"method"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.Interp.integrate1D-Tuple{NumericalEFT.CompositeGrids.Interp.CompositeIntegrate, Any, Any}","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.Interp.integrate1D","text":"function integrate1D(::CompositeIntegrate, data, xgrid)\n\ncalculate integration of data[i] on xgrid call integrate1D for each subgrid and return the sum.\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\n\n\n\n\n\n","category":"method"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.Interp.integrate1D-Tuple{NumericalEFT.CompositeGrids.Interp.NoIntegrate, Any, Any}","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.Interp.integrate1D","text":"function integrate1D(::NoIntegrate, data, xgrid)\n\ncalculate integration of data[i] on xgrid works for grids that do not have integration weight stored\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\n\n\n\n\n\n","category":"method"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.Interp.integrate1D-Tuple{NumericalEFT.CompositeGrids.Interp.WeightIntegrate, Any, Any}","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.Interp.integrate1D","text":"function integrate1D(::WeightIntegrate, data, xgrid)\n\ncalculate integration of data[i] on xgrid works for grids that have integration weight stored\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\n\n\n\n\n\n","category":"method"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.Interp.integrate1D-Union{Tuple{T}, Tuple{Any, T, Any}} where T","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.Interp.integrate1D","text":"function integrate1D(data, xgrid, range; axis=1)\n\ncalculate integration of data[i] on xgrid. For 1D data, return a number; for multiple dimension, reduce the given axis.\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\nrange: range of integration, [init, fin] within bound of xgrid.\naxis: axis to be integrated in data\n\n\n\n\n\n","category":"method"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.Interp.integrate1D-Union{Tuple{T}, Tuple{Any, T}} where T","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.Interp.integrate1D","text":"function integrate1D(data, xgrid; axis=1)\n\ncalculate integration of data[i] on xgrid. For 1D data, return a number; for multiple dimension, reduce the given axis.\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\naxis: axis to be integrated in data\n\n\n\n\n\n","category":"method"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.Interp.interp1D-Tuple{NumericalEFT.CompositeGrids.Interp.ChebInterp, Any, Any, Any}","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.Interp.interp1D","text":"function interp1D(::ChebInterp, data, xgrid, x)\n\nlinear interpolation of data(x), barycheb for BaryCheb grid\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\nx: x\n\n\n\n\n\n","category":"method"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.Interp.interp1D-Tuple{NumericalEFT.CompositeGrids.Interp.CompositeInterp, Any, Any, Any}","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.Interp.interp1D","text":"function interp1D(::CompositeInterp,data, xgrid, x)\n\nlinear interpolation of data(x), first floor on panel to find subgrid, then call interp1D on subgrid \n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\nx: x\n\n\n\n\n\n","category":"method"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.Interp.interp1D-Tuple{NumericalEFT.CompositeGrids.Interp.LinearInterp, Any, Any, Any}","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.Interp.interp1D","text":"function interp1D(::LinearInterp,data, xgrid, x)\n\nlinear interpolation of data(x), use floor and linear1D\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\nx: x\n\n\n\n\n\n","category":"method"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.Interp.interp1D-Union{Tuple{T}, Tuple{Any, T, Any}} where T","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.Interp.interp1D","text":"function interp1D(data, xgrid, x; axis=1, method=InterpStyle(T))\n\nlinear interpolation of data(x) with single or multiple dimension. For 1D data, return a number; for multiple dimension, reduce the given axis.\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\nx: x\naxis: axis to be interpolated in data\nmethod: by default use optimized method; use linear interp if Interp.LinearInterp()\n\n\n\n\n\n","category":"method"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.Interp.interp1DGrid-Tuple{NumericalEFT.CompositeGrids.Interp.CompositeInterp, Any, Any, Any}","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.Interp.interp1DGrid","text":"function interp1DGrid(::CompositeInterp, data, xgrid, grid)\n\nlinear interpolation of data(grid[1:end]), return a Vector grid should be sorted.\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\ngrid: points to be interpolated on\n\n\n\n\n\n","category":"method"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.Interp.interp1DGrid-Tuple{Union{NumericalEFT.CompositeGrids.Interp.ChebInterp, NumericalEFT.CompositeGrids.Interp.LinearInterp}, Any, Any, Any}","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.Interp.interp1DGrid","text":"function interp1DGrid(::Union{LinearInterp,ChebInterp}, data, xgrid, grid)\n\nlinear interpolation of data(grid[1:end]), return a Vector simply call interp1D on each points\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\ngrid: points to be interpolated on\n\n\n\n\n\n","category":"method"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.Interp.interp1DGrid-Union{Tuple{T}, Tuple{Any, T, Any}} where T","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.Interp.interp1DGrid","text":"function interp1DGrid(data, xgrid, grid; axis=1, method=InterpStyle(T))\n\nFor 1D data, do interpolation of data(grid[1:end]), return a Vector. For ND data, do interpolation of data(grid[1:end]) at given axis, return data of same dimension.\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\ngrid: points to be interpolated on\naxis: axis to be interpolated in data\nmethod: by default use optimized method; use linear interp if :linear\n\n\n\n\n\n","category":"method"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.Interp.interpsliced-Tuple{Any, Any}","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.Interp.interpsliced","text":"function interpsliced(neighbor, data; axis=1)\n\nInterpolate with given neighbor and sliced data. Assume data already sliced on given axis.\n\n#Members:\n\nneighbor: neighbor from findneighbor()\ndata: sliced data\naxis: axis sliced and to be interpolated\n\n\n\n\n\n","category":"method"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.Interp.linear1D-Tuple{Any, Any, Any}","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.Interp.linear1D","text":"function linear1D(data, xgrid, x)\n\nlinear interpolation of data(x)\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\ndata: one-dimensional array of data\nx: x\n\n\n\n\n\n","category":"method"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.Interp.linear2D-NTuple{5, Any}","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.Interp.linear2D","text":"linear2D(data, xgrid, ygrid, x, y) \n\nlinear interpolation of data(x, y)\n\n#Arguments:\n\nxgrid: one-dimensional grid of x\nygrid: one-dimensional grid of y\ndata: two-dimensional array of data\nx: x\ny: y\n\n\n\n\n\n","category":"method"},{"location":"lib/compositegrids/#NumericalEFT.CompositeGrids.Interp.linearND-Tuple{Any, Any, Any}","page":"Composite 1D Grids","title":"NumericalEFT.CompositeGrids.Interp.linearND","text":"function linearND(data, xgrids, xs)\n\nlinear interpolation of data(xs)\n\n#Arguments:\n\nxgrids: n-dimensional grids, xgrids[i] is a 1D grid\ndata: n-dimensional array of data\nxs: list of x, x[i] corresponds to xgrids[i]\n\n\n\n\n\n","category":"method"},{"location":"readme/FeynmanDiagram/#FeynmanDiagram","page":"FeynmanDiagram","title":"FeynmanDiagram","text":"","category":"section"},{"location":"readme/FeynmanDiagram/","page":"FeynmanDiagram","title":"FeynmanDiagram","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"readme/FeynmanDiagram/","page":"FeynmanDiagram","title":"FeynmanDiagram","text":"This package implements a mini-compiler that compiles generic Feynman diagrams into expression tree representations for fast computation. ","category":"page"},{"location":"readme/FeynmanDiagram/#Infrastructure","page":"FeynmanDiagram","title":"Infrastructure","text":"","category":"section"},{"location":"readme/FeynmanDiagram/","page":"FeynmanDiagram","title":"FeynmanDiagram","text":"In general, Feynman diagrams represents high-order integral. The integrand are propagators/interactions composed by the basis arithmetic operations (multiplication, addition). The sequence of calculating the integrand by combining the propagators/interactions with the arithmetic operatos can be represented as an algebraic expression tree. In this sense, the expression tree provides an intermediate representation (IR) for Feynman diagrams that completely independent of the diagram type. ","category":"page"},{"location":"readme/FeynmanDiagram/","page":"FeynmanDiagram","title":"FeynmanDiagram","text":"(Image: infrastructure)","category":"page"},{"location":"readme/FeynmanDiagram/","page":"FeynmanDiagram","title":"FeynmanDiagram","text":"Base on this observation, we develop a package to compile the integrand of Feynman diagrams into machine code so that one can evaluate the it efficiently. The infrastructure of this package is similar to the modern compiler LLVM for generic programming language. There are three layers: a front-end translates a source code into an IR as an expression tree, then a mid-end optimizes and transforms the IR, and a back-end to compiles the IR to machine code. ","category":"page"},{"location":"readme/FeynmanDiagram/","page":"FeynmanDiagram","title":"FeynmanDiagram","text":"The front-end supports Feynman diagrams from weak coupling expansion or strong coupling expansion. The user can incorprate new types of diagrams by writing their own front-end.\nThe mid-end performs universal optimizations and transformations of one expression tree to another. The possible optimizations of the expression tree includes: remove common nodes/leaves, remove zero-valued nodes/leaves, merge small nodes into a large one. The possible transformations include automatic differentiation (which can be useful to derive the diagrams for the specific heat, RG flow equation, etc.), renormalization of the propagators and the interactions, and analytic Matsubara-frequency integration (work in progress).\nThe back-end provides a universal subroutine to evalue the expression tree efficiently. ","category":"page"},{"location":"readme/FeynmanDiagram/#Supported-Front-end","page":"FeynmanDiagram","title":"Supported Front-end","text":"","category":"section"},{"location":"readme/FeynmanDiagram/#.-Generic-Weak-Coupling-Expansion-based-on-the-Parquet-Algorithm","page":"FeynmanDiagram","title":"1. Generic Weak Coupling Expansion based on the Parquet Algorithm","text":"","category":"section"},{"location":"readme/FeynmanDiagram/","page":"FeynmanDiagram","title":"FeynmanDiagram","text":"This algorithm generates the Feynman diagrams of weak coupling expansion. It supports the diagrams of self-energy, polarization, 3-point vertex function and 4-point vertex function. The internal degrees of freedom can be either the loop variables (e.g., momentum or frequency) or the site variables (e.g., imaginary-time or lattice site).","category":"page"},{"location":"readme/FeynmanDiagram/","page":"FeynmanDiagram","title":"FeynmanDiagram","text":"The main idea of the algorithm is to use the parquet equation to build high-order-vertex-function diagrams from the lower order sub-diagrams. ","category":"page"},{"location":"readme/FeynmanDiagram/","page":"FeynmanDiagram","title":"FeynmanDiagram","text":"The following code is a simple example to generate the one-loop 4-point vertex function diagrams, then visualize the expression tree.","category":"page"},{"location":"readme/FeynmanDiagram/","page":"FeynmanDiagram","title":"FeynmanDiagram","text":"using FeynmanDiagram\n\n# Define a parameter structure for the 4-vertex diagram with one-loop, in the momentum and the imaginary-time representation. Require the diagrams to be green's function irreducible.\npara = GenericPara(diagType =Ver4Diag, innerLoopNum = 1,hasTau = true, filter=[Girreducible,])\n\nver4=Parquet.build(para) #build the diagram tree with the parquet algorithm.\n\nplot_tree(ver4) # visualize the generated diagram tree\n\ntree=ExprTree.build(ver4.diagram) #optimize the diagram tree to get an optimized expression tree","category":"page"},{"location":"readme/FeynmanDiagram/","page":"FeynmanDiagram","title":"FeynmanDiagram","text":"The generated diagram tree is as shown in the following figure. The leaves of the tree are the propagators (labeled with G) and the interactions (labeled with Ins). By default, the interactions is assumed to spin-symmetric. A typical example is the Coulomb interaction. (Image: tree)","category":"page"},{"location":"readme/FeynmanDiagram/#.-Generic-Strong-Coupling-Expansion-(work-in-progress)","page":"FeynmanDiagram","title":"2. Generic Strong Coupling Expansion (work in progress)","text":"","category":"section"},{"location":"readme/FeynmanDiagram/#.-Hand-drawing-Feynman-diagrams-(work-in-progress)","page":"FeynmanDiagram","title":"3. Hand-drawing Feynman diagrams (work in progress)","text":"","category":"section"},{"location":"readme/FeynmanDiagram/#Expression-Tree-visualization","page":"FeynmanDiagram","title":"Expression Tree visualization","text":"","category":"section"},{"location":"readme/FeynmanDiagram/","page":"FeynmanDiagram","title":"FeynmanDiagram","text":"To visualize the diagram tree, you need to install the ete3 python3 package (http://etetoolkit.org/).","category":"page"},{"location":"readme/FeynmanDiagram/","page":"FeynmanDiagram","title":"FeynmanDiagram","text":"Note that we rely on \"PyCall.jl\" to call the ete3 python functions from julia. Therefore, you have to install ete3 python package use the python distribution associated with PyCall. According to the tutorial of PyCall (https://github.com/JuliaPy/PyCall.jl), \"by default on Mac and Windows systems, Pkg.add(\"PyCall\") or Pkg.build(\"PyCall\") will use the Conda.jl package to install a minimal Python distribution (via Miniconda) that is private to Julia (not in your PATH). You can use the Conda Julia package to install more Python packages, and import Conda to print the Conda.PYTHONDIR directory where python was installed. On GNU/Linux systems, PyCall will default to using the python3 program (if any, otherwise python) in your PATH.\"","category":"page"},{"location":"man/MC/#Important-Sampling","page":"Monte Carlo integrator","title":"Important Sampling","text":"","category":"section"},{"location":"man/MC/#Introduction","page":"Monte Carlo integrator","title":"Introduction","text":"","category":"section"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"This note compares two important sampling approaches for Monte Carlo integration. The first approach introduces a normalization sector and lets the Markov chain jumps between this additional sector and the integrand sector following a calibrated probability density for important sampling. One can infer the integration between the ratio of weights between two sectors. On the other hand, the second approach reweights the original integrand to make it as flat as possible, one then perform a random walk uniformly in the parameter space to calculate the integration. This is the conventional approach used in Vegas algorithm.","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"In general, the first approach is more robust than the second one, but less efficient. In many applications, for example, high order Feynman diagrams with a sign alternation, the important sampling probability can't represent the complicated integrand well. Then the first approach is as efficient as the second one, but tends to be much robust.","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"We next present a benchmark between two approaches. Consider the MC sampling of an one-dimensional functions f(x) (its sign may oscillate).","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"We want to design an efficient algorithm to calculate the integral int_a^b dx f(x). To do that, we normalize the integrand with an ansatz g(x)0 to reduce the variant. ","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"Our package supports two important sampling schemes. ","category":"page"},{"location":"man/MC/#Approach-1:-Algorithm-with-a-Normalization-Sector","page":"Monte Carlo integrator","title":"Approach 1: Algorithm with a Normalization Sector","text":"","category":"section"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"In this approach, the configuration spaces consist of two sub-spaces: the physical sector with orders nge 1 and the normalization sector with the order n=0. The weight function of the latter, g(x), should be simple enough so that the integral G=int g(x) d x is explicitly known. In our algorithm we use a constant g(x) propto 1 for simplicity. In this setup, the physical sector weight, namely the integral F = int f(x) dx, can be calculated with the equation","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"    F=fracF_rm MCG_rm MC G","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"where the MC estimators F_rm MC and G_rm MC are measured with ","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"F_rm MC =frac1N left sum_i=1^N_f fracf(x_i)rho_f(x_i) + sum_i=1^N_g 0 right","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"and","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"G_rm MC =frac1N leftsum_i=1^N_f 0 + sum_i=1^N_g fracg(x_i)rho_g(x_i)  right","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"The probability density of a given configuration is proportional to rho_f(x)=f(x) and rho_g(x)=g(x), respectively. After N MC updates, the physical sector is sampled for N_f times, and the normalization sector is for N_g times. ","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"Now we estimate the statistic error. According to the propagation of uncertainty, the variance of F  is given by","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":" fracsigma^2_FF^2 =  fracsigma_F_rm MC^2F_MC^2 + fracsigma_G_rm MC^2G_MC^2 ","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"where sigma_F_rm MC and sigma_G_rm MC are variance of the MC integration F_rm MC and G_rm MC, respectively. In the Markov chain MC, the variance of F_rm MC can be written as ","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"sigma^2_F_rm MC = frac1N left sum_i^N_f left( fracf(x_i)rho_f(x_i)- fracFZright)^2 +sum_j^N_g left(0-fracFZ right)^2  right ","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"= int left( fracf(x)rho_f(x) - fracFZ right)^2 fracrho_f(x)Z rm dx + int left( fracFZ right)^2 fracrho_g(x)Z dx ","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"=  int fracf^2(x)rho_f(x) fracdxZ -fracF^2Z^2 ","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"Here Z=Z_f+Z_g and Z_fg=int rho_fg(x)dx are the partition sums of the corresponding configuration spaces. Due to the detailed balance, one has Z_fZ_g=N_fN_g.  ","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"Similarly, the variance of G_rm MC can be written as ","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"sigma^2_G_rm MC=  int fracg^2(x)rho_g(x) fracdxZ - fracG^2Z^2","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"By substituting rho_f(x)=f(x) and  rho_g(x)=g(x), the variances of F_rm MC and G_rm MC are given by","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"sigma^2_F_rm MC= frac1Z^2 left( Z Z_f - F^2 right)","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"sigma^2_G_rm MC= frac1Z^2 left( Z Z_g - G^2 right)","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"We derive the variance of F as","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"fracsigma^2_FF^2 = fracZ cdot Z_fF^2+fracZ cdot Z_gG^2 - 2 ","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"Note that g(x)0 indicates Z_g = G,  so that","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"fracsigma^2_FF^2 = fracZ_f^2F^2+fracGcdot Z_fF^2+fracZ_fG - 1","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"Interestingly, this variance is a function of G instead of a functional of g(x). It is then possible to normalized g(x) with a constant to minimize the variance. The optimal constant makes G to be,","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"fracd sigma^2_FdG=0","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"which makes G_best = F. The minimized the variance is given by,","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"fracsigma^2_FF^2= left(fracZ_fF+1right)^2 - 2ge 0","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"The equal sign is achieved when f(x)0 is positively defined.","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"It is very important that the above analysis is based on the assumption that the autocorrelation time negligible. The autocorrelation time related to the jump between the normalization and physical sectors is controlled by the deviation of the ratio f(x)g(x) from unity. The variance sigma_F^2 given above will be amplified to sim sigma_F^2 tau where tau is the autocorrelation time.","category":"page"},{"location":"man/MC/#Approach-2:-Conventional-algorithm-(e.g.,-Vegas-algorithm)","page":"Monte Carlo integrator","title":"Approach 2: Conventional algorithm (e.g., Vegas algorithm)","text":"","category":"section"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"Important sampling is actually more straightforward than the above approach. One simply sample x with a distribution rho_g(x)=g(x)Z_g, then measure the observable f(x)g(x). Therefore, the mean estimation,","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"fracFZ=int dx fracf(x)g(x) rho_g(x)","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"the variance of F in this approach is given by,","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"sigma_F^2=Z_g^2int dx left( fracf(x)g(x)- fracFZ_gright)^2rho_g(x)","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"fracsigma_F^2F^2=fracZ_gF^2int dx fracf(x)^2g(x)- 1","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"The optimal g(x) that minimizes the variance is g(x) =f(x),","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"fracsigma_F^2F^2=fracZ_f^2F^2-1","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"The variance of the conventional approach is a functional of g(x), while that of the previous approach isn't. There are two interesting limit:\nIf the f(x)0, the optimal choice g(x)=f(x) leads to zero variance. In this limit, the conventional approach is clearly much better than the previous approach.\nOn the other hand, if g(x) is far from the optimal choice f(x), say simply setting g(x)=1, one naively expect that the the conventional approach may leads to much larger variance than the previous approach. However,  this statement may not be true. If g(x) is very different from f(x), the normalization and the physical sector in the previous approach mismatch, causing large autocorrelation time and large statistical error . In contrast, the conventional approach doesn't have this problem.","category":"page"},{"location":"man/MC/#Benchmark","page":"Monte Carlo integrator","title":"Benchmark","text":"","category":"section"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"To benchmark, we sample the following integral up to 10^8 updates, ","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"int_0^beta e^-(x-beta2)^2delta^2dx approx sqrtpidelta","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"where beta gg delta.","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"g(x)=f(x)","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"Normalization Sector:  doesn't lead to exact result, the variance left(fracZ_fF+1right)^2 - 2=2 doesn't change with parameters","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"beta 10 100\nresult 0.1771(1) 0.1773(1)","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"Conventional: exact result","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"g(x)=sqrtpideltabeta1","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"beta 10 100\nNormalization 0.1772(4) 0.1767(17)\nConventional 0.1777(3) 0.1767(8)","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"g(x)=exp(-(x-beta2+s)^2delta^2) with beta=100","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"s delta 2delta 3delta 4delta 5delta\nNormalization 0.1775(8) 0.1767(25) 0.1770(60) 0.176(15) 183(143)\nConventional 0.1776(5) 0.1707(39) 0.1243(174) 0.0204 (64) ","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"The conventional algorithm is not ergodic anymore for s=4delta, the acceptance ratio to update x is about 015, while the normalization algorithm becomes non ergodic for s=5delta. So the latter is slightly more stable.","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"<!– The code are ![[test.jl]] for the normalization approach and ![[test2.jl]] for the conventional approach. –>","category":"page"},{"location":"man/MC/","page":"Monte Carlo integrator","title":"Monte Carlo integrator","text":"Reference:  [1] Wang, B.Z., Hou, P.C., Deng, Y., Haule, K. and Chen, K., Fermionic sign structure of high-order Feynman diagrams in a many-fermion system. Physical Review B, 103, 115141 (2021).","category":"page"},{"location":"lib/MCintegration/#Monte-Carlo-Integrator","page":"Monte Carlo Integrator","title":"Monte Carlo Integrator","text":"","category":"section"},{"location":"lib/MCintegration/","page":"Monte Carlo Integrator","title":"Monte Carlo Integrator","text":"Modules = [NumericalEFT.MCIntegration]","category":"page"},{"location":"lib/MCintegration/#NumericalEFT.MCIntegration.Configuration","page":"Monte Carlo Integrator","title":"NumericalEFT.MCIntegration.Configuration","text":"mutable struct Configuration\n\nStruct that contains everything needed for MC.\n\nThere are three different componenets:\n\nMembers\n\nStatic parameters\n\nseed: seed to initialize random numebr generator, also serves as the unique pid of the configuration\nrng: a MersenneTwister random number generator, seeded by seed\npara: user-defined parameter, set to nothing if not needed\ntotalStep: the total number of updates for this configuration\nvar: TUPLE of variables, each variable should be derived from the abstract type Variable, see variable.jl for details). Use a tuple rather than a vector improves the performance.\n\nintegrand properties\n\nneighbor::Vector{Vector{Int}} : vectors that indicates the neighbors of each integrand. e.g., ([2, ], [1, ]) means the neighbor of the first integrand is the second one, while the neighbor of the second integrand is the first.    There is a MC update proposes to jump from one integrand to another. If these two integrands' degrees of freedom are very different, then the update is unlikely to be accepted. To avoid this problem, one can specify neighbor to guide the update. \nBy default, we assume the N integrands are in the increase order, meaning the neighbor will be set to ([N+1, 2], [1, 3], [2, 4], ..., [N-1,], [1, ]), where the first N entries are for diagram 1, 2, ..., N and the last entry is for the normalization diagram. Only the first diagram is connected to the normalization diagram.\ndof::Vector{Vector{Int}}: degrees of freedom of each integrand, e.g., [[0, 1], [2, 3]] means the first integrand has zero var#1 and one var#2; while the second integrand has two var#1 and 3 var#2. \nobservable: observables that is required to calculate the integrands, will be used in the measure function call.   It is either an array of any type with the common operations like +-*/^ defined. \nreweight: reweight factors for each integrands. The reweight factor of the normalization diagram is assumed to be 1. Note that you don't need to explicitly add the normalization diagram. \nvisited: how many times this integrand is visited by the Markov chain.\n\ncurrent MC state\n\nstep: the number of MC updates performed up to now\ncurr: the current integrand, initialize with 1\nnorm: the index of the normalization diagram. norm is larger than the index of any user-defined integrands \nnormalization: the accumulated normalization factor. Physical observable = Configuration.observable/Configuration.normalization.\nabsWeight: the abolute weight of the current integrand. User is responsible to initialize it after the contructor is called.\npropose/accept: array to store the proposed and accepted updates for each integrands and variables.  Their shapes are (number of updates X integrand number X max(integrand number, variable number).  The last index will waste some memory, but the dimension is small anyway.\n\n\n\n\n\n","category":"type"},{"location":"lib/MCintegration/#NumericalEFT.MCIntegration.create!-Tuple{NumericalEFT.MCIntegration.Angle, Int64, Any}","page":"Monte Carlo Integrator","title":"NumericalEFT.MCIntegration.create!","text":"create!(theta::Angle, idx::Int, rng=GLOBAL_RNG)\n\nPropose to generate new angle (uniformly) randomly in [0, 2π), return proposal probability\n\nArguments\n\ntheta:  angle variable\nidx: theta.t[idx] will be updated\n\n\n\n\n\n","category":"method"},{"location":"lib/MCintegration/#NumericalEFT.MCIntegration.create!-Tuple{NumericalEFT.MCIntegration.Continuous, Int64, Any}","page":"Monte Carlo Integrator","title":"NumericalEFT.MCIntegration.create!","text":"create!(T::Continuous, idx::Int, rng=GLOBAL_RNG)\n\nPropose to generate new (uniform) variable randomly in [T.lower, T.lower+T.range), return proposal probability\n\nArguments\n\nT:  Continuous variable\nidx: T.data[idx] will be updated\n\n\n\n\n\n","category":"method"},{"location":"lib/MCintegration/#NumericalEFT.MCIntegration.create!-Tuple{NumericalEFT.MCIntegration.Discrete, Int64, Any}","page":"Monte Carlo Integrator","title":"NumericalEFT.MCIntegration.create!","text":"create!(newIdx::Int, size::Int, rng=GLOBAL_RNG)\n\nPropose to generate new index (uniformly) randomly in [1, size]\n\nArguments\n\nnewIdx:  index ∈ [1, size]\nsize : up limit of the index\nrng=GLOBAL_RNG : random number generator\n\n\n\n\n\n","category":"method"},{"location":"lib/MCintegration/#NumericalEFT.MCIntegration.create!-Tuple{NumericalEFT.MCIntegration.RadialFermiK, Int64, Any}","page":"Monte Carlo Integrator","title":"NumericalEFT.MCIntegration.create!","text":"create!(K::RadialFermiK, idx::Int, rng=GLOBAL_RNG)\n\nPropose to generate new k randomly in [0, +inf), return proposal probability k is generated uniformly on [0, K.kF-K.δk), Lorentzianly on [K.kF-K.δk,K.kF+K.δk), and exponentially on [K.kF-K.δk, +inf).\n\nArguments\n\nK:  k variable\nidx: K.data[idx] will be updated\n\n\n\n\n\n","category":"method"},{"location":"lib/MCintegration/#NumericalEFT.MCIntegration.create!-Tuple{NumericalEFT.MCIntegration.Tau, Int64, Any}","page":"Monte Carlo Integrator","title":"NumericalEFT.MCIntegration.create!","text":"create!(T::Tau, idx::Int, rng=GLOBAL_RNG)\n\nPropose to generate new tau (uniformly) randomly in [0, β), return proposal probability\n\nArguments\n\nT:  Tau variable\nidx: T.data[idx] will be updated\n\n\n\n\n\n","category":"method"},{"location":"lib/MCintegration/#NumericalEFT.MCIntegration.create!-Tuple{NumericalEFT.MCIntegration.TauPair, Int64, Any}","page":"Monte Carlo Integrator","title":"NumericalEFT.MCIntegration.create!","text":"create!(T::TauPair, idx::Int, rng=GLOBAL_RNG)\n\nPropose to generate a new pair of tau (uniformly) randomly in [0, β), return proposal probability\n\nArguments\n\nT:  TauPair variable\nidx: T.data[idx] will be updated\n\n\n\n\n\n","category":"method"},{"location":"lib/MCintegration/#NumericalEFT.MCIntegration.create!-Union{Tuple{D}, Tuple{NumericalEFT.MCIntegration.FermiK{D}, Int64, Any}} where D","page":"Monte Carlo Integrator","title":"NumericalEFT.MCIntegration.create!","text":"create!(K::FermiK{D}, idx::Int, rng=GLOBAL_RNG)\n\nPropose to generate new Fermi K in [Kf-δK, Kf+δK)\n\nArguments\n\nnewK:  vector of dimension of d=2 or 3\n\n\n\n\n\n","category":"method"},{"location":"lib/MCintegration/#NumericalEFT.MCIntegration.remove!-Tuple{NumericalEFT.MCIntegration.Angle, Int64, Any}","page":"Monte Carlo Integrator","title":"NumericalEFT.MCIntegration.remove!","text":"remove(theta::Angle, idx::Int, rng=GLOBAL_RNG)\n\nPropose to remove old theta in [0, 2π), return proposal probability\n\nArguments\n\n- `theta`:  Tau variable\n\nidx: theta.t[idx] will be updated\n\n\n\n\n\n","category":"method"},{"location":"lib/MCintegration/#NumericalEFT.MCIntegration.remove!-Tuple{NumericalEFT.MCIntegration.Continuous, Int64, Any}","page":"Monte Carlo Integrator","title":"NumericalEFT.MCIntegration.remove!","text":"remove(T::Continuous, idx::Int, rng=GLOBAL_RNG)\n\nPropose to remove old variable in [T.lower, T.lower+T.range), return proposal probability\n\nArguments\n\nT:  Continuous variable\nidx: T.data[idx] will be updated\n\n\n\n\n\n","category":"method"},{"location":"lib/MCintegration/#NumericalEFT.MCIntegration.remove!-Tuple{NumericalEFT.MCIntegration.Discrete, Int64, Any}","page":"Monte Carlo Integrator","title":"NumericalEFT.MCIntegration.remove!","text":"remove!(newIdx::Int, size::Int, rng=GLOBAL_RNG)\n\nPropose to remove the old index in [1, size]\n\nArguments\n\noldIdx:  index ∈ [1, size]\nsize : up limit of the index\nrng=GLOBAL_RNG : random number generator\n\n\n\n\n\n","category":"method"},{"location":"lib/MCintegration/#NumericalEFT.MCIntegration.remove!-Tuple{NumericalEFT.MCIntegration.RadialFermiK, Int64, Any}","page":"Monte Carlo Integrator","title":"NumericalEFT.MCIntegration.remove!","text":"remove(K::RadialFermiK, idx::Int, rng=GLOBAL_RNG)\n\nPropose to remove old k in [0, +inf), return proposal probability\n\nArguments\n\nK:  K variable\nidx: K.data[idx] will be updated\n\n\n\n\n\n","category":"method"},{"location":"lib/MCintegration/#NumericalEFT.MCIntegration.remove!-Tuple{NumericalEFT.MCIntegration.Tau, Int64, Any}","page":"Monte Carlo Integrator","title":"NumericalEFT.MCIntegration.remove!","text":"remove(T::Tau, idx::Int, rng=GLOBAL_RNG)\n\nPropose to remove old tau in [0, β), return proposal probability\n\nArguments\n\nT:  Tau variable\nidx: T.data[idx] will be updated\n\n\n\n\n\n","category":"method"},{"location":"lib/MCintegration/#NumericalEFT.MCIntegration.remove!-Tuple{NumericalEFT.MCIntegration.TauPair, Int64, Any}","page":"Monte Carlo Integrator","title":"NumericalEFT.MCIntegration.remove!","text":"remove(T::TauPair, idx::Int, rng=GLOBAL_RNG)\n\nPropose to remove an existing pair of tau in [0, β), return proposal probability\n\nArguments\n\nT:  Tau variable\nidx: T.data[idx] will be updated\n\n\n\n\n\n","category":"method"},{"location":"lib/MCintegration/#NumericalEFT.MCIntegration.remove!-Union{Tuple{D}, Tuple{NumericalEFT.MCIntegration.FermiK{D}, Int64, Any}} where D","page":"Monte Carlo Integrator","title":"NumericalEFT.MCIntegration.remove!","text":"removeFermiK!(oldK, Kf=1.0, δK=0.5, rng=GLOBAL_RNG)\n\nPropose to remove an existing Fermi K in [Kf-δK, Kf+δK)\n\nArguments\n\noldK:  vector of dimension of d=2 or 3\n\n\n\n\n\n","category":"method"},{"location":"lib/MCintegration/#NumericalEFT.MCIntegration.sample-Tuple{Configuration, Function, Function}","page":"Monte Carlo Integrator","title":"NumericalEFT.MCIntegration.sample","text":"sample(config::Configuration, integrand::Function, measure::Function; Nblock=16, print=0, printio=stdout, save=0, saveio=nothing, timer=[])\n\nsample the integrands, collect statistics, and return the expected values and errors.\n\nRemarks\n\nUser may run the MC in parallel using MPI. Simply run mpiexec -n N julia userscript.jl where N is the number of workers. In this mode, only the root process returns meaningful results. All other workers return nothing, nothing. User is responsible to handle the returning results properly. If you have multiple number of mpi version, you can use \"mpiexecjl\" in your \"~/.julia/package/MPI/###/bin\" to make sure the version is correct. See https://juliaparallel.github.io/MPI.jl/stable/configuration/ for more detail.\nIn the MC, a normalization diagram is introduced to normalize the MC estimates of the integrands. More information can be found in the link: https://kunyuan.github.io/QuantumStatistics.jl/dev/man/important_sampling/#Important-Sampling. User don't need to explicitly specify this normalization diagram.Internally, normalization diagram will be added to each table that is related to the integrands.\n\nArguments\n\nconfig: Configuration struct\nintegrand: function call to evaluate the integrand. It should accept an argument of the type Configuration, and return a weight.   Internally, MC only samples the absolute value of the weight. Therefore, it is also important to define Main.abs for the weight if its type is user-defined. \nmeasure: function call to measure. It should accept an argument of the type Configuration, then manipulate observables obs. \nNblock: Number of blocks, each block corresponds to one Configuration struct. The tasks will automatically distributed to multi-process in MPI mode. If the numebr of workers N is larger than Nblock, then Nblock will be set to be N.\nprint: -1 to not print anything, 0 to print minimal information, >0 to print summary for every print seconds\nprintio: io to print the information\nsave: -1 to not save anything, 0 to save observables obs in the end of sampling, >0 to save observables obs for every save seconds\nsaveio: io to save\ntimer: StopWatch other than print and save.\nreweight = config.totalStep/10: the MC steps before reweighting the integrands. Set to -1 if reweighting is not wanted.\n\n\n\n\n\n","category":"method"},{"location":"lib/MCintegration/#NumericalEFT.MCIntegration.shift!-Tuple{NumericalEFT.MCIntegration.Angle, Int64, Any}","page":"Monte Carlo Integrator","title":"NumericalEFT.MCIntegration.shift!","text":"shift!(theta::Angle, idx::Int, rng=GLOBAL_RNG)\n\nPropose to shift the old theta to new theta, both in [0, 2π), return proposal probability\n\nArguments\n\ntheta:  angle variable\nidx: theta.t[idx] will be updated\n\n\n\n\n\n","category":"method"},{"location":"lib/MCintegration/#NumericalEFT.MCIntegration.shift!-Tuple{NumericalEFT.MCIntegration.Continuous, Int64, Any}","page":"Monte Carlo Integrator","title":"NumericalEFT.MCIntegration.shift!","text":"shift!(T::Continuous, idx::Int, rng=GLOBAL_RNG)\n\nPropose to shift an existing variable to a new one, both in [T.lower, T.lower+T.range), return proposal probability\n\nArguments\n\nT:  Continuous variable\nidx: T.data[idx] will be updated\n\n\n\n\n\n","category":"method"},{"location":"lib/MCintegration/#NumericalEFT.MCIntegration.shift!-Tuple{NumericalEFT.MCIntegration.Discrete, Int64, Any}","page":"Monte Carlo Integrator","title":"NumericalEFT.MCIntegration.shift!","text":"shift!(d::Discrete, idx::Int, config)\n\nPropose to shift the old index in [1, size] to a new index\n\nArguments\n\noldIdx:  old index ∈ [1, size]\nnewIdx:  new index ∈ [1, size], will be modified!\nsize : up limit of the index\nrng=GLOBAL_RNG : random number generator\n\n\n\n\n\n","category":"method"},{"location":"lib/MCintegration/#NumericalEFT.MCIntegration.shift!-Tuple{NumericalEFT.MCIntegration.RadialFermiK, Int64, Any}","page":"Monte Carlo Integrator","title":"NumericalEFT.MCIntegration.shift!","text":"shift!(K::RadialFermiK, idx::Int, rng=GLOBAL_RNG)\n\nPropose to shift an existing k to a new k, both in [0, +inf), return proposal probability\n\nArguments\n\nK:  K variable\nidx: K.data[idx] will be updated\n\n\n\n\n\n","category":"method"},{"location":"lib/MCintegration/#NumericalEFT.MCIntegration.shift!-Tuple{NumericalEFT.MCIntegration.Tau, Int64, Any}","page":"Monte Carlo Integrator","title":"NumericalEFT.MCIntegration.shift!","text":"shift!(T::Tau, idx::Int, rng=GLOBAL_RNG)\n\nPropose to shift an existing tau to a new tau, both in [0, β), return proposal probability\n\nArguments\n\nT:  Tau variable\nidx: T.data[idx] will be updated\n\n\n\n\n\n","category":"method"},{"location":"lib/MCintegration/#NumericalEFT.MCIntegration.shift!-Tuple{NumericalEFT.MCIntegration.TauPair, Int64, Any}","page":"Monte Carlo Integrator","title":"NumericalEFT.MCIntegration.shift!","text":"shift!(T::TauPair, idx::Int, rng=GLOBAL_RNG)\n\nPropose to shift an existing tau pair to a new tau pair, both in [0, β), return proposal probability\n\nArguments\n\nT:  Tau variable\nidx: T.t[idx] will be updated\n\n\n\n\n\n","category":"method"},{"location":"lib/MCintegration/#NumericalEFT.MCIntegration.shift!-Union{Tuple{D}, Tuple{NumericalEFT.MCIntegration.FermiK{D}, Int64, Any}} where D","page":"Monte Carlo Integrator","title":"NumericalEFT.MCIntegration.shift!","text":"shiftK!(oldK, newK, step, rng=GLOBAL_RNG)\n\nPropose to shift oldK to newK. Work for generic momentum vector\n\n\n\n\n\n","category":"method"},{"location":"lib/MCintegration/#NumericalEFT.MCIntegration.swap!-Tuple{NumericalEFT.MCIntegration.Discrete, Int64, Int64, Any}","page":"Monte Carlo Integrator","title":"NumericalEFT.MCIntegration.swap!","text":"swap!(d::Discrete, idx1::Int, idx2::Int, config)\n\nSwap the variables idx1 and idx2\n\n\n\n\n\n","category":"method"},{"location":"lib/MCintegration/#NumericalEFT.MCIntegration.swap!-Tuple{NumericalEFT.MCIntegration.Tau, Int64, Int64, Any}","page":"Monte Carlo Integrator","title":"NumericalEFT.MCIntegration.swap!","text":"swap!(T::Tau, idx1::Int, idx2::Int, config)\n\nSwap the variables idx1 and idx2\n\n\n\n\n\n","category":"method"},{"location":"lib/Feynmandiagram/#Feynman-Diagram","page":"Feynman Diagram","title":"Feynman Diagram","text":"","category":"section"},{"location":"lib/Feynmandiagram/#Diagrams-as-an-AbstractTree","page":"Feynman Diagram","title":"Diagrams as an AbstractTree","text":"","category":"section"},{"location":"lib/Feynmandiagram/","page":"Feynman Diagram","title":"Feynman Diagram","text":"Modules = [FeynmanDiagram.DiagTree]","category":"page"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.DiagTree.BareGreenNId","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.DiagTree.BareGreenNId","text":"time-ordered N-point Bare Green's function\n\n\n\n\n\n","category":"type"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.DiagTree.BareHoppingId","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.DiagTree.BareHoppingId","text":"hopping function c⁺c⁻\n\n\n\n\n\n","category":"type"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.DiagTree.ConnectedGreenNId","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.DiagTree.ConnectedGreenNId","text":"time-ordered N-point Composite Green's function\n\n\n\n\n\n","category":"type"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.DiagTree.Diagram","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.DiagTree.Diagram","text":"mutable struct Diagram{W}\n\nstruct of a diagram. A diagram of a sum or produce of various subdiagrams.\n\nMembers\n\nhash::Int          : the unique hash number to identify the diagram\nname::Symbol       : name of the diagram\nid::DiagramId      : diagram id \noperator::Operator : operation, support Sum() and Prod()\nfactor::W          : additional factor of the diagram\nsubdiagram::Vector{Diagram{W}}   : vector of sub-diagrams\nweight::W          : weight of the diagram\n\n\n\n\n\n","category":"type"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.DiagTree.DiagramId","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.DiagTree.DiagramId","text":"abstract type DiagramId end\n\nThe abstract type of all diagrams/subdiagrams/bare propagators\n\n\n\n\n\n","category":"type"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.DiagTree.GreenNId","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.DiagTree.GreenNId","text":"time-ordered N-point Composite Green's function\n\n\n\n\n\n","category":"type"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.DiagTree.PropagatorId","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.DiagTree.PropagatorId","text":"abstract type PropagatorId <: DiagramId end\n\nThe abstract type of all bare propagators\n\n\n\n\n\n","category":"type"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.DiagTree.derivative-Union{Tuple{ID}, Tuple{Union{Tuple, AbstractVector, Diagram}, Type{ID}, Int64}} where ID<:PropagatorId","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.DiagTree.derivative","text":"function derivative(diags::Union{Diagram,Tuple,AbstractVector}, ::Type{ID}, order::Int) where {ID<:PropagatorId}\n\nAutomatic differentiation derivative on the diagrams\n\nArguments\n\ndiags      : diagrams to take derivative\nID         : DiagramId to apply the differentiation\norder::Int : derivative order\n\n\n\n\n\n","category":"method"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.DiagTree.derivative-Union{Tuple{ID}, Tuple{Union{Tuple, AbstractVector, Diagram}, Type{ID}}} where ID<:PropagatorId","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.DiagTree.derivative","text":"function derivative(diags::Union{Diagram,Tuple,AbstractVector}, ::Type{ID}) where {ID<:PropagatorId}\n\nAutomatic differentiation derivative on the diagrams\n\nArguments\n\ndiags     : diagrams to take derivative\nID        : DiagramId to apply the differentiation\n\n\n\n\n\n","category":"method"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.DiagTree.plot_tree-Tuple{Diagram}","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.DiagTree.plot_tree","text":"function plot_tree(diag::Diagram; verbose = 0, maxdepth = 6)\n\nVisualize the diagram tree using ete3 python package\n\n#Arguments\n\ndiag        : the Diagram struct to visualize\nverbose=0   : the amount of information to show\nmaxdepth=6  : deepest level of the diagram tree to show\n\n\n\n\n\n","category":"method"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.DiagTree.removeDuplicatedLeaves!-Tuple{AbstractVector}","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.DiagTree.removeDuplicatedLeaves!","text":"removeDuplicatedLeaves!(diags::AbstractVector; verbose = 0)\n\nremove duplicated nodes such as:  ---> ver4 ---> InteractionId. Leaf will not be touched!\n\n\n\n\n\n","category":"method"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.DiagTree.removeHatreeFock!-Tuple{Union{Tuple, AbstractVector, Diagram}}","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.DiagTree.removeHatreeFock!","text":"function removeHatreeFock!(diags::Union{Diagram,Tuple,AbstractVector})\n\nRemove the Hatree-Fock insertions that without any derivatives on the propagator and the interaction.\n\nArguments\n\ndiags      : diagrams to remove the Fock insertion\n\nRemarks\n\nThe operations removeHatreeFock! and taking derivatives doesn't commute with each other! \nIf the input diagram is a Hatree-Fock diagram, then the overall weight will become zero! \n\n\n\n\n\n","category":"method"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.DiagTree.removeOneChildParent!-Tuple{AbstractVector}","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.DiagTree.removeOneChildParent!","text":"removeOneChildParent!(diags::AbstractVector; verbose = 0)\n\nremove duplicated nodes such as:  ---> ver4 ---> InteractionId. Leaf will not be touched!\n\n\n\n\n\n","category":"method"},{"location":"lib/Feynmandiagram/#Diagrams-as-an-Expression-Tree","page":"Feynman Diagram","title":"Diagrams as an Expression Tree","text":"","category":"section"},{"location":"lib/Feynmandiagram/","page":"Feynman Diagram","title":"Feynman Diagram","text":"Modules = [FeynmanDiagram.ExprTree]","category":"page"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.ExprTree.CachedPool","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.ExprTree.CachedPool","text":"struct CachedPool{O,T}\n\n    Use this pool to host the objects that are heavy to evaluate so that one wants to cache their status.\n    The user should defines a compare\n\nMembers\n\nname::Symbol : name of the pool\nobject::O    : object\ncurrent::T      : current status\nnew::T       : the new status wants to assign later\nversion::Int128 : the current version\nexcited::Bool   : if set to excited, then the current status needs to be replaced with the new status\n\n\n\n\n\n","category":"type"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.ExprTree.ExpressionTree","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.ExprTree.ExpressionTree","text":"mutable struct ExpressionTree{V,PARA,F,W}\n\nDiagram Object represents a set of Feynman diagrams in an experssion tree (forest) structure\n\nMembers\n\nname::Symbol                     : Name of the tree\nloopBasis::V                     : Tuple of pools of cached basis  in a format of (BasisPool1, BasisPool2, ...)\nnode::CachedPool{Node{PARA,F},W} : Pool of the nodes in the diagram tree\nroot::Vector{Int}                : indices of the cached nodes that are the root(s) of the diagram tree. Each element corresponds to one root.\n\n\n\n\n\n","category":"type"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.ExprTree.LoopPool","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.ExprTree.LoopPool","text":"struct LoopPool{T}\n\nPool of loop basis. Each loop basis corresponds to a loop variable.\nA loop variable is a linear combination of N independent loops. The combination coefficients is what we call a loop basis.\nFor example, if a loop is a momentum K, then\n\nvaribale_i = K_1*basis[1, i] + K_2*basis[2, i] + K_3*basis[3, i] + ...\n\nMembers\n\nname::Symbol : name of the pool\ndim::Int     : dimension of a loop variable (for example, the dimension of a momentum-frequency loop variable is (d+1) where d is the spatial dimension)\nN::Int       : number of independent loops (dimension of loop basis)\nbasis::Matrix{T}    : Matrix of (N x Nb) that stores the loop basis, where Nb is the number of loop basis (or number of loop variables).\ncurrent::Matrix{T}  : Matrix of (dim x Nb) that stores the loop variables, where Nb is the number of loop basis (or number of loop variables).\n\n\n\n\n\n","category":"type"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.ExprTree.Node","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.ExprTree.Node","text":"mutable struct Node{PARA,F}\n\nNode Object, which is the building block of the diagram tree. Each node is a collection of CACHED proapgator objects and other child CACHED node objects\n\nMembers\n\npara::PARA     : user-defined parameters, which will be used to evaluate the factor and the weight of the node (e.g., if the node represents a vertex function, then the parameter may be the momentum basis of the external legs)\noperation::Int : #1: multiply, 2: add, ...\nfactor::F      : additional factor of the node\ncomponents::Vector{Vector{Int}}  : Index to the cached propagators stored in certain pools. Each Vector{Int} is for one kind of propagator.\nchildNodes::Vector{Int}  : Indices to the cached nodes stored in certain pool. They are the child of the current node in the diagram tree.\nparent::Int : Index to the cached nodes which is the parent of the current node.\n\n\n\n\n\n","category":"type"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.ExprTree.addnode!-Union{Tuple{W}, Tuple{F}, Tuple{PARA}, Tuple{V}, Tuple{NumericalEFT.FeynmanDiagram.ExprTree.ExpressionTree{V, PARA, F, W}, Any, Any, Union{Tuple, AbstractVector}}, Tuple{NumericalEFT.FeynmanDiagram.ExprTree.ExpressionTree{V, PARA, F, W}, Any, Any, Union{Tuple, AbstractVector}, Any}} where {V, PARA, F, W}","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.ExprTree.addnode!","text":"function addnode!(diag::ExpressionTree{V,PARA,F,W}, operator, name, children::Union{Tuple, AbstractVector}, factor = 1.0; para = nothing) where {V,PARA,F,W}\n\nAdd a node into the expression tree.\n\nArguments\n\ndiag::ExpressionTree  : diagrammatic experssion tree.\noperator::Int         : #1: multiply, 2: add, ...\nname                  : name of the node\nchildren              : Indices to the cached nodes stored in certain pool. They are the child of the current node in the diagram tree. It should be in the format of Vector{Int}.\nfactor = 1.0          : Factor of the node\npara = nothing        : Additional paramenter required to evaluate the node. Set to nothing by default.\n\n\n\n\n\n","category":"method"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.ExprTree.addpropagator!-Union{Tuple{W}, Tuple{F}, Tuple{PARA}, Tuple{V}, Tuple{NumericalEFT.FeynmanDiagram.ExprTree.ExpressionTree{V, PARA, F, W}, Any}, Tuple{NumericalEFT.FeynmanDiagram.ExprTree.ExpressionTree{V, PARA, F, W}, Any, Any}} where {V, PARA, F, W}","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.ExprTree.addpropagator!","text":"function addPropagator!(diag::ExpressionTree, name, factor = 1.0; site = [], loop = nothing, para = nothing, order::Int = 0)\n\nAdd a propagator into the diagram tree.\n\nArguments\n\ndiag           : diagrammatic experssion tree.\norder::Int = 0 : Order of the propagator.\nname = :none   : name of the propagator.\nfactor = 1     : Factor of the propagator.\nsite = []      : site basis (e.g, time and space coordinate) of the propagator.\nloop = nothing : loop basis (e.g, momentum and frequency) of the propagator.\npara = nothing : Additional paramenter required to evaluate the propagator.\n\n\n\n\n\n","category":"method"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.ExprTree.getNode-Tuple{Any, Int64}","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.ExprTree.getNode","text":"function getNode(diag::Diagrams, nidx::Int)\n\nget Node in the diag with the index nidx.\n\n\n\n\n\n","category":"method"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.ExprTree.getNodeWeight-Tuple{Any, Int64}","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.ExprTree.getNodeWeight","text":"function getNodeWeight(tree, nidx::Int)\n\nget Node weight in the diagram experssion tree with the index nidx.\n\n\n\n\n\n","category":"method"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.ExprTree.showTree-Tuple{NumericalEFT.FeynmanDiagram.ExprTree.ExpressionTree, Int64}","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.ExprTree.showTree","text":"showTree(diag::Diagrams, _root = diag.root[end]; verbose = 0, depth = 999)\n\nVisualize the diagram tree using ete3 python package\n\n#Arguments\n\ndiag: the Diagrams struct to visualize\n_root: the index of the root node to visualize\nverbose=0: the amount of information to show\ndepth=999: deepest level of the diagram tree to show\n\n\n\n\n\n","category":"method"},{"location":"lib/Feynmandiagram/#Parquet-Algorithm-to-Build-Diagrams","page":"Feynman Diagram","title":"Parquet Algorithm to Build Diagrams","text":"","category":"section"},{"location":"lib/Feynmandiagram/","page":"Feynman Diagram","title":"Feynman Diagram","text":"Modules = [FeynmanDiagram.Parquet]","category":"page"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.Parquet.ParquetBlocks","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.Parquet.ParquetBlocks","text":"struct ParquetBlocks\n\nThe channels of the left and right sub-vertex4 of a bubble diagram in the parquet equation\n\n#Members\n\nphi   : channels of left sub-vertex for the particle-hole and particle-hole-exchange bubbles\nppi   : channels of left sub-vertex for the particle-particle bubble\nΓ4   : channels of right sub-vertex of all channels\n\n\n\n\n\n","category":"type"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.Parquet.green","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.Parquet.green","text":"green(para, extK = DiagTree.getK(para.totalLoopNum, 1), extT = para.hasTau ? (1, 2) : (0, 0), subdiagram = false;\n    name = :G, resetuid = false)\n\nBuild composite Green's function.\nBy definition, para.firstTauIdx is the first Tau index of the left most self-energy subdiagram.\n\nArguments\n\npara            : parameters. It should provide internalLoopNum, interactionTauNum, firstTauIdx\nextK            : basis of external loop. \nextT: [Tau index of the left leg, Tau index of the right leg]\nsubdiagram      : a sub-vertex or not\nname            : name of the diagram\nresetuid        : restart uid count from 1\n\nOutput\n\nA Diagram object or nothing if the Green's function is illegal. \n\n\n\n\n\n","category":"function"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.Parquet.polarization","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.Parquet.polarization","text":"function polarization(para, extK = DiagTree.getK(para.totalLoopNum, 1), subdiagram = false; name = :Π, resetuid = false)\n\nGenerate polarization diagrams using Parquet Algorithm.\n\nArguments\n\npara            : parameters. It should provide internalLoopNum, interactionTauNum, firstTauIdx\nextK            : basis of external loop. \nsubdiagram      : a sub-vertex or not\nname            : name of the vertex\nresetuid        : restart uid count from 1\n\nOutput\n\nA DataFrame with fields :response, :diagram, :hash. \nAll polarization share the same external Tau index. With imaginary-time variables, they are extT = (para.firstTauIdx, para.firstTauIdx+1)\n\n\n\n\n\n","category":"function"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.Parquet.sigma","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.Parquet.sigma","text":"function sigma(para, extK = DiagTree.getK(para.totalLoopNum, 1), subdiagram = false; name = :Σ, resetuid = false)\n\nBuild sigma diagram. \nWhen sigma is created as a subdiagram, then no Fock diagram is generated if para.filter contains NoFock, and no sigma diagram is generated if para.filter contains Girreducible\n\nArguments\n\npara            : parameters. It should provide internalLoopNum, interactionTauNum, firstTauIdx\nextK            : basis of external loop. \nsubdiagram      : a sub-vertex or not\nname            : name of the diagram\nresetuid        : restart uid count from 1\n\nOutput\n\nA DataFrame with fields :type, :extT, :diagram, :hash\nAll sigma share the same incoming Tau index, but not the outgoing one\n\n\n\n\n\n","category":"function"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.Parquet.vertex3","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.Parquet.vertex3","text":"function vertex3(para, extK = [DiagTree.getK(para.totalLoopNum, 1), DiagTree.getK(para.totalLoopNum, 2)],\n    subdiagram = false; name = :Γ3, chan = [PHr, PHEr, PPr, Alli], resetuid = false)\n\nGenerate 3-vertex diagrams using Parquet Algorithm.\nWith imaginary-time variables, all vertex3 generated has the same bosonic Tidx ``extT[1]=para.firstTauIdx`` and the incoming fermionic Tidx ``extT[2]=para.firstTauIdx+1``.\n\n#Arguments\n\npara            : parameters. It should provide internalLoopNum, interactionTauNum, firstTauIdx\nextK            : basis of external loops as a vector [bosonic leg, fermionic in, fermionic out]. \nsubdiagram      : a sub-vertex or not\nname            : name of the vertex\nchan            : vector of channels of the current 4-vertex. \nresetuid        : restart uid count from 1\n\nOutput\n\nA DataFrame with fields :response, :extT, :diagram, :hash. \n\n\n\n\n\n","category":"function"},{"location":"lib/Feynmandiagram/#NumericalEFT.FeynmanDiagram.Parquet.vertex4","page":"Feynman Diagram","title":"NumericalEFT.FeynmanDiagram.Parquet.vertex4","text":"vertex4(para::GenericPara,\n    extK = [DiagTree.getK(para.totalLoopNum, 1), DiagTree.getK(para.totalLoopNum, 2), DiagTree.getK(para.totalLoopNum, 3)],\n    chan::AbstractVector = [PHr, PHEr, PPr, Alli],\n    subdiagram = false;\n    level = 1, name = :none, resetuid = false,\n    phi_toplevel = ParquetBlocks().phi, ppi_toplevel = ParquetBlocks().ppi, Γ4_toplevel = ParquetBlocks().Γ4)\n\nGenerate 4-vertex diagrams using Parquet Algorithm\n\nArguments\n\npara            : parameters. It should provide internalLoopNum, interactionTauNum, firstTauIdx\nextK            : basis of external loops as a vector [left in, left out, right in, right out]. \nchan            : vector of channels of the current 4-vertex. \nsubdiagram      : a sub-vertex or not\nname            : name of the vertex\nlevel           : level in the diagram tree\nresetuid        : restart uid count from 1\nphi_toplevel    : channels of left sub-vertex for the particle-hole and particle-hole-exchange of the bubble at level one.\nppi_toplevel    : channels of left sub-vertex for the particle-particle bubble at level one\nΓ4_toplevel     : channels of right sub-vertex for all all bubbles at level one\n\nOutput\n\nA DataFrame with fields :response, :type, :extT, :diagram, :hash\n\n\n\n\n\n","category":"function"},{"location":"lib/Feynmandiagram/#Usage","page":"Feynman Diagram","title":"Usage","text":"","category":"section"},{"location":"lib/Feynmandiagram/","page":"Feynman Diagram","title":"Feynman Diagram","text":"using FeynmanDiagram\npara = GenericPara(diagType = Ver4Diag, innerLoopNum = 1, hasTau = true);\nParquet.vertex4(para)\n\npara = GenericPara(diagType = Ver3Diag, innerLoopNum = 1, hasTau = true);\nParquet.vertex3(para)\n\npara = GenericPara(diagType = SigmaDiag, innerLoopNum = 1, hasTau = true);\nParquet.sigma(para)\n\npara = GenericPara(diagType = PolarDiag, innerLoopNum = 1, hasTau = true);\nParquet.polarization(para)","category":"page"},{"location":"man/DLR/","page":"Discrete Lehmann Representation","title":"Discrete Lehmann Representation","text":"CurrentModule = Lehmann","category":"page"},{"location":"man/DLR/#Lehmann.jl","page":"Discrete Lehmann Representation","title":"Lehmann.jl","text":"","category":"section"},{"location":"man/DLR/","page":"Discrete Lehmann Representation","title":"Discrete Lehmann Representation","text":"Documentation for Lehmann.jl.","category":"page"},{"location":"man/DLR/#Discrete-Lehmann-Representation-(DLR)","page":"Discrete Lehmann Representation","title":"Discrete Lehmann Representation (DLR)","text":"","category":"section"},{"location":"man/DLR/","page":"Discrete Lehmann Representation","title":"Discrete Lehmann Representation","text":"This package provides subroutines to represent and manuipulate Green's functions in the imaginary-time or in the Matsubara-frequency domain. ","category":"page"},{"location":"man/DLR/","page":"Discrete Lehmann Representation","title":"Discrete Lehmann Representation","text":"Imaginary-time Green's functions encode the thermodynamic properites of quantum many-body systems. At low temperature, they are typically very singular and hard to deal with in numerical calculations. ","category":"page"},{"location":"man/DLR/","page":"Discrete Lehmann Representation","title":"Discrete Lehmann Representation","text":"The physical Green's functions always have the analytic structure specified by the Lehmann representation,","category":"page"},{"location":"man/DLR/","page":"Discrete Lehmann Representation","title":"Discrete Lehmann Representation","text":"G(tau)=-int_-infty^infty K(tau omega) rho(omega) d omega","category":"page"},{"location":"man/DLR/","page":"Discrete Lehmann Representation","title":"Discrete Lehmann Representation","text":"where tau is the imaginary time, omega is the real frequency. While the spectral density rho(omega) depends on the details of the quantum many-body system, the convolution kernel K(tau omega) is universal and is roughly an exponential function exp(-omega tau). ","category":"page"},{"location":"man/DLR/","page":"Discrete Lehmann Representation","title":"Discrete Lehmann Representation","text":"If one cares about the thermodynamic quantities, one only needs to manipulate the Green's functions. Then DLR allows us to represent the Green's function up to an accuracy epsilon with a fake spectral function only has a handful poles,","category":"page"},{"location":"man/DLR/","page":"Discrete Lehmann Representation","title":"Discrete Lehmann Representation","text":"G(tau) approx G_mathrmDLR(tau) equiv sum_k=1^r Kleft(tau omega_kright) widehatrho_k","category":"page"},{"location":"man/DLR/","page":"Discrete Lehmann Representation","title":"Discrete Lehmann Representation","text":"where r is called the rank of DLR. It is of the order,","category":"page"},{"location":"man/DLR/","page":"Discrete Lehmann Representation","title":"Discrete Lehmann Representation","text":"r sim log fracE_uvT log frac1ϵ","category":"page"},{"location":"man/DLR/","page":"Discrete Lehmann Representation","title":"Discrete Lehmann Representation","text":"where T is the temperature, E_uv is the ultraviolet energy scale beyond which the physical spectral function decays away, epsilon is the accuracy.","category":"page"},{"location":"man/DLR/","page":"Discrete Lehmann Representation","title":"Discrete Lehmann Representation","text":"The hallmarks of DLR are the following,","category":"page"},{"location":"man/DLR/","page":"Discrete Lehmann Representation","title":"Discrete Lehmann Representation","text":"In typical use cases, only dozens of coefficients are needed to represent the Green's functions up to the accuracy 1e-10.\nThe basis functions K(tau omega_i) are simple, explicit and analytic functions. It makes the Green's function manipulation (interpolation, fourier transform, convolution) rather simple in DLR.","category":"page"},{"location":"man/DLR/#Main-Features","page":"Discrete Lehmann Representation","title":"Main Features","text":"","category":"section"},{"location":"man/DLR/","page":"Discrete Lehmann Representation","title":"Discrete Lehmann Representation","text":"We provide the following components to ease the numerical manipulation of the Green's functions:","category":"page"},{"location":"man/DLR/","page":"Discrete Lehmann Representation","title":"Discrete Lehmann Representation","text":"Algorithms to generate the discrete Lehamnn representation (DLR), which is a generic and compact representation of Green's functions proposed in the Ref. [1]. In this package, two algorithms are provided: one algorithm is based on conventional QR algorithm, another is based on a functional QR algorithm. The latter extends DLR to extremely low temperature.\nDedicated DLR for Green's functions with the particle-hole symmetry (e.g. phonon propagator) or with the particle-hole antisymmetry (e.g. superconductor gap function).\nFast and accurate Fourier transform between the imaginary-time domain and the Matsubara-frequency domain with a cost sim O(log(1T)log(1ϵ)) and an accuracy ~100ϵ.\nFast and accurate Green's function interpolation with a cost sim O(log(1T)log(1ϵ)) and an accuracy ~100ϵ.\nFit a Green's function with noisy.","category":"page"},{"location":"man/DLR/#Reference","page":"Discrete Lehmann Representation","title":"Reference","text":"","category":"section"},{"location":"man/DLR/","page":"Discrete Lehmann Representation","title":"Discrete Lehmann Representation","text":"If this library helps you to create software or publications, please let us know, and cite","category":"page"},{"location":"man/DLR/","page":"Discrete Lehmann Representation","title":"Discrete Lehmann Representation","text":"[1] \"Discrete Lehmann representation of imaginary time Green's functions\", Jason Kaye, Kun Chen, and Olivier Parcollet, arXiv:2107.13094","category":"page"},{"location":"man/DLR/","page":"Discrete Lehmann Representation","title":"Discrete Lehmann Representation","text":"[2] \"libdlr: Efficient imaginary time calculations using the discrete Lehmann representation\", Jason Kaye and Hugo U.R. Strand, arXiv:2110.06765","category":"page"},{"location":"lib/fastmath/#Fast-Math-Functions","page":"Fast Math Functions","title":"Fast Math Functions","text":"","category":"section"},{"location":"lib/fastmath/","page":"Fast Math Functions","title":"Fast Math Functions","text":"Modules = [NumericalEFT.FastMath]","category":"page"},{"location":"lib/fastmath/#NumericalEFT.FastMath","page":"Fast Math Functions","title":"NumericalEFT.FastMath","text":"Provide a set of fast math functions\n\n\n\n\n\n","category":"module"},{"location":"lib/fastmath/#NumericalEFT.FastMath.invsqrt-Tuple{Float64}","page":"Fast Math Functions","title":"NumericalEFT.FastMath.invsqrt","text":"invsqrt(x)\n\nThe Legendary Fast Inverse Square Root See the following links: wikipedia and thesis\n\n\n\n\n\n","category":"method"},{"location":"man/tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"man/tutorial/#Numerical-Effective-Field-Theory","page":"Tutorial","title":"Numerical Effective Field Theory","text":"","category":"section"},{"location":"readme/Atom/#Atom","page":"Atom","title":"Atom","text":"","category":"section"},{"location":"readme/Atom/","page":"Atom","title":"Atom","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"man/kernel/#Convention","page":"Lehmann representation convention","title":"Convention","text":"","category":"section"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"The kernel in the Lehammn representation is a function that only depends on the statistics of the quantum particles, and the symmetry of the Green's function. It is universal in the sense that it doesn't depend on the microscopic details of the quantum many-body system. ","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"The definition of the kernel is not unique. Here we give the defintion in this package.","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"We use the following conventions:","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"Temperature T .\nInverse temperature beta= 1T.\nReal frequency omega.\nImaginary time tau.\nMatsubara frequancy iomega_n. \nFor the fermonic case, omega_n = (2n+1)pi T. \nFor the bosonic case,  omega_n = 2npi T\nFermionic Green's function is antiperiodic G(tau)=-G(beta+tau). \nBosonic one is periodic G(tau)=G(beta+tau). \nDon't confuse the periodicity with the time-reversal symmetry (a.k.a, particle-hole symmetry). \nFourier transform follows the convention in the book \"Quantum Many-particle Systems\" by J. Negele and H. Orland, Page 95,","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"G(tau) = frac1beta sum_n G(iomega_n) texte^-iomega_n tau","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"G(iomega_n) = int_0^beta G(tau) texte^iomega_n tau dtau","category":"page"},{"location":"man/kernel/#Fermion-without-Symmetry","page":"Lehmann representation convention","title":"Fermion without Symmetry","text":"","category":"section"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"Imaginary time ","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"K(τ ω) = frace^-ωτ1+e^-ωβ","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"Matusbara frequency ","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"K(iω_n ω) = -frac1iω_n-ω","category":"page"},{"location":"man/kernel/#Boson-without-Symmetry","page":"Lehmann representation convention","title":"Boson without Symmetry","text":"","category":"section"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"We use a bosonic kernel with a regularator near omega =. The imaginary-time kernel happens to be the same as the fermionic kernel. The details can be found in Appendix A of this DLR paper. ","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"Imaginary time ","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"K(τ ω) = frace^-ωτ1+e^-ωβ","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"Matusbara frequency ","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"K(iω_n ω) = -frac1iω_n-ωfrac1-e^-ωβ1+e^-ωβ","category":"page"},{"location":"man/kernel/#Fermion-with-the-Particle-hole-Symmetry","page":"Lehmann representation convention","title":"Fermion with the Particle-hole Symmetry","text":"","category":"section"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"Particle-hole symmetry means the time reversal symmetry, so that G(tau)=G(beta-tau).","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"Imaginary time","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"K(τ ω) = e^-ωτ+e^-ω(β-τ)","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"Matusbara frequency","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"K(iω_n ω) = frac2iω_nω^2+ω_n^2(1+e^-ωβ)","category":"page"},{"location":"man/kernel/#Boson-with-the-Particle-hole-Symmetry","page":"Lehmann representation convention","title":"Boson with the Particle-hole Symmetry","text":"","category":"section"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"Particle-hole symmetry means the time reversal symmetry, so that G(tau)=G(beta-tau).","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"Imaginary time","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"K(τ ω) = e^-ωτ+e^-ω(β-τ)","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"Matusbara frequency","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"K(iω_n ω) = frac2ωω^2+ω_n^2(1-e^-ωβ)","category":"page"},{"location":"man/kernel/#Fermion-with-the-Particle-hole-Anti-Symmetry","page":"Lehmann representation convention","title":"Fermion with the Particle-hole Anti-Symmetry","text":"","category":"section"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"Particle-hole antisymmetry means the time reversal symmetry, so that G(tau)=-G(beta-tau).","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"Imaginary time","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"K(τ ω) = e^-ωτ-e^-ω(β-τ)","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"Matusbara frequency","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"K(iω_n ω) = frac2ωω^2+ω_n^2(1+e^-ωβ)","category":"page"},{"location":"man/kernel/#Boson-with-the-Particle-hole-Anti-Symmetry","page":"Lehmann representation convention","title":"Boson with the Particle-hole Anti-Symmetry","text":"","category":"section"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"Particle-hole antisymmetry means the time reversal symmetry, so that G(tau)=-G(beta-tau).","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"Imaginary time","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"K(τ ω) = e^-ωτ-e^-ω(β-τ)","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"Matusbara frequency","category":"page"},{"location":"man/kernel/","page":"Lehmann representation convention","title":"Lehmann representation convention","text":"K(iω_n ω) = frac2iω_nω^2+ω_n^2(1-e^-ωβ)","category":"page"},{"location":"readme/CompositeGrids/","page":"CompositeGrids","title":"CompositeGrids","text":"[[https://numericaleft.github.io/CompositeGrids.jl/dev/][https://img.shields.io/badge/docs-dev-blue.svg]] [[https://github.com/numericaleft/CompositeGrids.jl/actions][https://github.com/numericaleft/CompositeGrids.jl/workflows/CI/badge.svg]] [[https://codecov.io/gh/numericaleft/CompositeGrids.jl][https://codecov.io/gh/numericalEFT/CompositeGrids.jl/branch/main/graph/badge.svg?token=WN6HO1XASY]]","category":"page"},{"location":"readme/CompositeGrids/","page":"CompositeGrids","title":"CompositeGrids","text":"#+OPTIONS: toc:2","category":"page"},{"location":"readme/CompositeGrids/","page":"CompositeGrids","title":"CompositeGrids","text":"Introduction\nCompositeGrids gives a unified interface to generate various common 1D grids and also the composite grids that is a combination of basic grids, together with the floor function, interpolation function and also integration function that is optimized for some of the grids.\nTable of Contents :TOC2gh:\n[[#introduction][Introduction]]\n[[#quick-start][Quick Start]]\n[[#installation][Installation]]\n[[#manual][Manual]]\n[[#basics][Basics]]\n[[#simple-grids][Simple Grids]]\n[[#composite-grids][Composite Grids]]\n[[#interpolation-and-integration][Interpolation and Integration]]\nQuick Start\nIn the following example we show how to generate a \\tau grid from 0 to \\beta, log-densed at 0 and \\beta, and optimized for integration. The description is attached in the comments in the code.\n#+begin_src julia :session :results output replace :exports both   using CompositeGrids   β = 10\nGenerating a log densed composite grid with LogDensedGrid()\ntgrid = CompositeGrid.LogDensedGrid(       :gauss,# The top layer grid is :gauss, optimized for integration. For interpolation use :cheb       [0.0, β],# The grid is defined on [0.0, β]       [0.0, β],# and is densed at 0.0 and β, as given by 2nd and 3rd parameter.       5,# N of log grid       0.005, # niminum interval length of log grid       5 # N of bottom layer   )\nThe grid has 3 layers.\nThe top layer is defined by the boundary and densed points. In this case its:\nprintln(\"Top layer:\",tgrid.panel.grid)\nThe middle layer is a log grid with 4 points and minimum interval length 0.001:\nprintln(\"First subgrid of middle layer:\",tgrid.subgrids[1].panel.grid)\nThe bottom layer is a Gauss-Legendre grid with 5 points:\nprintln(\"First subgrid of bottom layer:\",tgrid.subgrids[1].subgrids[1].grid)\nfunction to be integrated:\nf(t) = exp(t)+exp(β-t)\nnumerical value on grid points:\ndata = [f(t) for (ti, t) in enumerate(tgrid.grid)]\nintegrate with integrate1D():\nint_result = Interp.integrate1D(data, tgrid)\nprintln(\"result=\",intresult)   println(\"comparing to:\",2*(exp(β)-1)) #+endsrc\n#+RESULTS: : Top layer:[0.0, 5.0, 10.0] : First subgrid of middle layer:[0.0, 0.005000000000000001, 0.05000000000000001, 0.5, 5.0] : First subgrid of bottom layer:[0.00023455038515334025, 0.0011538267247357924, 0.0025000000000000005, 0.0038461732752642086, 0.004765449614846661] : result=44050.91248775534 : comparing to:44050.931589613436\nInstallation\nStatic version could be installed via standard package manager with Pkg.add(\"CompositeGrids\").\nFor developing version, git clone this repo and add with Pkg.develop(\"directory/of/the/repo\").\nManual","category":"page"},{"location":"readme/CompositeGrids/","page":"CompositeGrids","title":"CompositeGrids","text":"** Basics","category":"page"},{"location":"readme/CompositeGrids/","page":"CompositeGrids","title":"CompositeGrids","text":"The grids are provided in two modules, SimpleGrid and CompositeGrid. SimpleGrid consists of several    common 1D grids that is defined straightforward and has simple structure. CompositeGrid defines a    general type of grids composed by a panel grid and a set of subgrids. The common interface of grids    are the following:","category":"page"},{"location":"readme/CompositeGrids/","page":"CompositeGrids","title":"CompositeGrids","text":"g.bound gives the boundary of the interval of the grid.\ng.size gives the total number of grid points.\ng.grid gives the array of grid points.\ng[i] returns the i-th grid point, same as g.grid[i].\nfloor(g, x) returns the largest index of grid point where g[i]<x. Return 1 for x<g[1] and (grid.size-1) for x>g[end], so that both floor() and (floor()+1) are valid grid indices.","category":"page"},{"location":"readme/CompositeGrids/","page":"CompositeGrids","title":"CompositeGrids","text":"Interpolation and integration are also provided, with different implemented functions for different grids.","category":"page"},{"location":"readme/CompositeGrids/","page":"CompositeGrids","title":"CompositeGrids","text":"** Simple Grids","category":"page"},{"location":"readme/CompositeGrids/","page":"CompositeGrids","title":"CompositeGrids","text":"Various basic grids are designed for use and also as components of composite grids, including:    Arbitrary, Uniform, Log, BaryCheb, and GaussLegendre.","category":"page"},{"location":"readme/CompositeGrids/","page":"CompositeGrids","title":"CompositeGrids","text":"Arbitrary grid is the most general basic grid, which takes an array and turn it into a grid.    An O(\\ln(N)) floor function based on searchsortedfirst() is provided.","category":"page"},{"location":"readme/CompositeGrids/","page":"CompositeGrids","title":"CompositeGrids","text":"Uniform grid is defined by the boundary and number of grid points.    An O(1) floor function is provided.","category":"page"},{"location":"readme/CompositeGrids/","page":"CompositeGrids","title":"CompositeGrids","text":"Log grid is defined by the boundary, number of grid points, minimum interval, and also the direction.    A log densed grid is generated according to the parameters provided.    For example:    #+beginsrc julia :session :results output replace :exports both      using CompositeGrids      loggrid = SimpleGrid.Log{Float64}([0.0,1.0], 6, 0.0001, true)      println(loggrid.grid)    #+endsrc","category":"page"},{"location":"readme/CompositeGrids/","page":"CompositeGrids","title":"CompositeGrids","text":"#+RESULTS:    : [0.0, 0.00010000000000000005, 0.0010000000000000002, 0.010000000000000002, 0.1, 1.0]    An O(1) floor function is provided.","category":"page"},{"location":"readme/CompositeGrids/","page":"CompositeGrids","title":"CompositeGrids","text":"BaryCheb grid is designed for interpolation. It's defined by the boundary and number of grid points,    but the grid points are not distributed uniformly. The floor function is not optimized    so the O(\\ln(N)) function will be used, but the interpolation is based on an optimized algorithm.","category":"page"},{"location":"readme/CompositeGrids/","page":"CompositeGrids","title":"CompositeGrids","text":"GaussLegendre grid is designed for integration. It's defined by the boundary and number of grid points,    but the grid points are not distributed uniformly. The floor function is not optimized    so the O(\\ln(N)) function will be used. The 1D integration is optimized.","category":"page"},{"location":"readme/CompositeGrids/","page":"CompositeGrids","title":"CompositeGrids","text":"Also notice that there's open grids and closed grids. Closed grids means that the boundary points are    also grid points, while open grids means the opposite. Only BaryCheb and GaussLegendre are open.","category":"page"},{"location":"readme/CompositeGrids/","page":"CompositeGrids","title":"CompositeGrids","text":"A detailed manual can be found [[https://numericaleft.github.io/CompositeGrids.jl/dev/lib/simple/][here]].","category":"page"},{"location":"readme/CompositeGrids/","page":"CompositeGrids","title":"CompositeGrids","text":"** Composite Grids","category":"page"},{"location":"readme/CompositeGrids/","page":"CompositeGrids","title":"CompositeGrids","text":"Composite grid is a general type of grids where the whole interval is first divided by a panel grid,    then each interval of a panel grid is divided by a smaller grid in subgrids. Subgrid could also be    composite grid.","category":"page"},{"location":"readme/CompositeGrids/","page":"CompositeGrids","title":"CompositeGrids","text":"LogDensedGrid is a useful generator of CompositeGrid which gives a general solution when an 1D grid on an    interval is needed to be log-densed around several points. For example, \\tau grids need to be densed around    0 and \\beta, and momentum grids need to be densed around Fermi momentum.    The grid is defined as a three-layer composite grid with the top layer being an Arbitrary grid defined by    the boundary and densed points, the middle layer a Log grid which is densed at the points required, and the    bottom layer a grid of three options. Three types are :cheb, :gauss, and :uniform, which corresponds to    BaryCheb grid for interpolation, GaussLegendre grid for integration, and Uniform grid for general use.    The floor function is defined recursively, i.e. the floor function of the panel grid is called to find the    corresponding subgrid, and then the floor function of the subgrid is called to find the result. Since the    subgrids could also be CompositeGrid, this process continues until the lowest level of the subgrids is reached.","category":"page"},{"location":"readme/CompositeGrids/","page":"CompositeGrids","title":"CompositeGrids","text":"A detailed manual can be found [[https://numericaleft.github.io/CompositeGrids.jl/dev/lib/composite/][here]].","category":"page"},{"location":"readme/CompositeGrids/","page":"CompositeGrids","title":"CompositeGrids","text":"** Interpolation and Integration","category":"page"},{"location":"readme/CompositeGrids/","page":"CompositeGrids","title":"CompositeGrids","text":"Interpolation gives an estimate of the function value at x with given grid and function value on the grid.    For most of the simple grids the interpolation is given by linear interpolation with the floor function to find    the corresponding grid points. BaryCheb uses an optimized algorithm for interpolation which makes use of the information    of all grid points, and thus gives a more precise interpolation with the same number of grid points, given the condition that    the function itself is smooth enough. For composite grids, the interpolation is done recursively, so that the final result    depends on the type of lowest level grid. Interpolation for higher dimension where the data is defined on a list of grids is also    given, but only linear interpolation is implemented, even when some of the grids are BaryCheb.","category":"page"},{"location":"readme/CompositeGrids/","page":"CompositeGrids","title":"CompositeGrids","text":"Integration over 1D grid is also provided. For most of simple grids it's given by linear integral, while for GaussLegendre grid it's    optimized. For composite grids it's again recursively done so that the method depends on the type of lowest level grids.","category":"page"},{"location":"readme/CompositeGrids/","page":"CompositeGrids","title":"CompositeGrids","text":"A detailed manual can be found [[https://numericaleft.github.io/CompositeGrids.jl/dev/lib/interpolate/][here]].","category":"page"},{"location":"readme/GreenFunc/#GreenFunc","page":"GreenFunc","title":"GreenFunc","text":"","category":"section"},{"location":"readme/GreenFunc/","page":"GreenFunc","title":"GreenFunc","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"readme/GreenFunc/","page":"GreenFunc","title":"GreenFunc","text":"This library provides structures of different types of Green's function. Here we give a introduction of these Green's function.","category":"page"},{"location":"readme/GreenFunc/#Features","page":"GreenFunc","title":"Features","text":"","category":"section"},{"location":"readme/GreenFunc/","page":"GreenFunc","title":"GreenFunc","text":"We provide the following containers to save different Green's functions:","category":"page"},{"location":"readme/GreenFunc/","page":"GreenFunc","title":"GreenFunc","text":"-One body Green's function that has a built-in discrete Lehamnn representation (DLR),  which is a generic and  compact representation of Green's functions proposed in the Ref. [1]. ","category":"page"},{"location":"readme/GreenFunc/","page":"GreenFunc","title":"GreenFunc","text":"For all Green's functions we provide the following manipulations:","category":"page"},{"location":"readme/GreenFunc/","page":"GreenFunc","title":"GreenFunc","text":"Fast and accurate Fourier transform between the imaginary-time domain and the Matsubara-frequency domain.\nFast and accurate Green's function interpolation.","category":"page"},{"location":"readme/GreenFunc/#Installation","page":"GreenFunc","title":"Installation","text":"","category":"section"},{"location":"readme/GreenFunc/","page":"GreenFunc","title":"GreenFunc","text":"This package has been registered. So, simply type import Pkg; Pkg.add(\"GreenFunc\") in the Julia REPL to install.","category":"page"},{"location":"readme/GreenFunc/#Basic-Usage","page":"GreenFunc","title":"Basic Usage","text":"","category":"section"},{"location":"man/important_sampling/#Important-Sampling","page":"Important Sampling","title":"Important Sampling","text":"","category":"section"},{"location":"man/important_sampling/#Introduction","page":"Important Sampling","title":"Introduction","text":"","category":"section"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"This note compares two important sampling approaches for Monte Carlo integration. The first approach introduces a normalization sector and lets the Markov chain jumps between this additional sector and the integrand sector following a calibrated probability density for important sampling. One can infer the integration between the ratio of weights between two sectors. On the other hand, the second approach reweights the original integrand to make it as flat as possible, one then perform a random walk uniformly in the parameter space to calculate the integration. This is the conventional approach used in Vegas algorithm.","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"In general, the first approach is more robust than the second one, but less efficient. In many applications, for example, high order Feynman diagrams with a sign alternation, the important sampling probability can't represent the complicated integrand well. Then the first approach is as efficient as the second one, but tends to be much robust.","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"We next present a benchmark between two approaches. Consider the MC sampling of an one-dimensional functions f(x) (its sign may oscillate).","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"We want to design an efficient algorithm to calculate the integral int_a^b dx f(x). To do that, we normalize the integrand with an ansatz g(x)0 to reduce the variant. ","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"Our package supports two important sampling schemes. ","category":"page"},{"location":"man/important_sampling/#Approach-1:-Algorithm-with-a-Normalization-Sector","page":"Important Sampling","title":"Approach 1: Algorithm with a Normalization Sector","text":"","category":"section"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"In this approach, the configuration spaces consist of two sub-spaces: the physical sector with orders nge 1 and the normalization sector with the order n=0. The weight function of the latter, g(x), should be simple enough so that the integral G=int g(x) d x is explicitly known. In our algorithm we use a constant g(x) propto 1 for simplicity. In this setup, the physical sector weight, namely the integral F = int f(x) dx, can be calculated with the equation","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"    F=fracF_rm MCG_rm MC G","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"where the MC estimators F_rm MC and G_rm MC are measured with ","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"F_rm MC =frac1N left sum_i=1^N_f fracf(x_i)rho_f(x_i) + sum_i=1^N_g 0 right","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"and","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"G_rm MC =frac1N leftsum_i=1^N_f 0 + sum_i=1^N_g fracg(x_i)rho_g(x_i)  right","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"The probability density of a given configuration is proportional to rho_f(x)=f(x) and rho_g(x)=g(x), respectively. After N MC updates, the physical sector is sampled for N_f times, and the normalization sector is for N_g times. ","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"Now we estimate the statistic error. According to the propagation of uncertainty, the variance of F  is given by","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":" fracsigma^2_FF^2 =  fracsigma_F_rm MC^2F_MC^2 + fracsigma_G_rm MC^2G_MC^2 ","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"where sigma_F_rm MC and sigma_G_rm MC are variance of the MC integration F_rm MC and G_rm MC, respectively. In the Markov chain MC, the variance of F_rm MC can be written as ","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"sigma^2_F_rm MC = frac1N left sum_i^N_f left( fracf(x_i)rho_f(x_i)- fracFZright)^2 +sum_j^N_g left(0-fracFZ right)^2  right ","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"= int left( fracf(x)rho_f(x) - fracFZ right)^2 fracrho_f(x)Z rm dx + int left( fracFZ right)^2 fracrho_g(x)Z dx ","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"=  int fracf^2(x)rho_f(x) fracdxZ -fracF^2Z^2 ","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"Here Z=Z_f+Z_g and Z_fg=int rho_fg(x)dx are the partition sums of the corresponding configuration spaces. Due to the detailed balance, one has Z_fZ_g=N_fN_g.  ","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"Similarly, the variance of G_rm MC can be written as ","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"sigma^2_G_rm MC=  int fracg^2(x)rho_g(x) fracdxZ - fracG^2Z^2","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"By substituting rho_f(x)=f(x) and  rho_g(x)=g(x), the variances of F_rm MC and G_rm MC are given by","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"sigma^2_F_rm MC= frac1Z^2 left( Z Z_f - F^2 right)","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"sigma^2_G_rm MC= frac1Z^2 left( Z Z_g - G^2 right)","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"We derive the variance of F as","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"fracsigma^2_FF^2 = fracZ cdot Z_fF^2+fracZ cdot Z_gG^2 - 2 ","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"Note that g(x)0 indicates Z_g = G,  so that","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"fracsigma^2_FF^2 = fracZ_f^2F^2+fracGcdot Z_fF^2+fracZ_fG - 1","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"Interestingly, this variance is a function of G instead of a functional of g(x). It is then possible to normalized g(x) with a constant to minimize the variance. The optimal constant makes G to be,","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"fracd sigma^2_FdG=0","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"which makes G_best = F. The minimized the variance is given by,","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"fracsigma^2_FF^2= left(fracZ_fF+1right)^2 - 2ge 0","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"The equal sign is achieved when f(x)0 is positively defined.","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"It is very important that the above analysis is based on the assumption that the autocorrelation time negligible. The autocorrelation time related to the jump between the normalization and physical sectors is controlled by the deviation of the ratio f(x)g(x) from unity. The variance sigma_F^2 given above will be amplified to sim sigma_F^2 tau where tau is the autocorrelation time.","category":"page"},{"location":"man/important_sampling/#Approach-2:-Conventional-algorithm-(e.g.,-Vegas-algorithm)","page":"Important Sampling","title":"Approach 2: Conventional algorithm (e.g., Vegas algorithm)","text":"","category":"section"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"Important sampling is actually more straightforward than the above approach. One simply sample x with a distribution rho_g(x)=g(x)Z_g, then measure the observable f(x)g(x). Therefore, the mean estimation,","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"fracFZ=int dx fracf(x)g(x) rho_g(x)","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"the variance of F in this approach is given by,","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"sigma_F^2=Z_g^2int dx left( fracf(x)g(x)- fracFZ_gright)^2rho_g(x)","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"fracsigma_F^2F^2=fracZ_gF^2int dx fracf(x)^2g(x)- 1","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"The optimal g(x) that minimizes the variance is g(x) =f(x),","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"fracsigma_F^2F^2=fracZ_f^2F^2-1","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"The variance of the conventional approach is a functional of g(x), while that of the previous approach isn't. There are two interesting limit:\nIf the f(x)0, the optimal choice g(x)=f(x) leads to zero variance. In this limit, the conventional approach is clearly much better than the previous approach.\nOn the other hand, if g(x) is far from the optimal choice f(x), say simply setting g(x)=1, one naively expect that the the conventional approach may leads to much larger variance than the previous approach. However,  this statement may not be true. If g(x) is very different from f(x), the normalization and the physical sector in the previous approach mismatch, causing large autocorrelation time and large statistical error . In contrast, the conventional approach doesn't have this problem.","category":"page"},{"location":"man/important_sampling/#Benchmark","page":"Important Sampling","title":"Benchmark","text":"","category":"section"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"To benchmark, we sample the following integral up to 10^8 updates, ","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"int_0^beta e^-(x-beta2)^2delta^2dx approx sqrtpidelta","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"where beta gg delta.","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"g(x)=f(x)","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"Normalization Sector:  doesn't lead to exact result, the variance left(fracZ_fF+1right)^2 - 2=2 doesn't change with parameters","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"beta 10 100\nresult 0.1771(1) 0.1773(1)","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"Conventional: exact result","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"g(x)=sqrtpideltabeta1","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"beta 10 100\nNormalization 0.1772(4) 0.1767(17)\nConventional 0.1777(3) 0.1767(8)","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"g(x)=exp(-(x-beta2+s)^2delta^2) with beta=100","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"s delta 2delta 3delta 4delta 5delta\nNormalization 0.1775(8) 0.1767(25) 0.1770(60) 0.176(15) 183(143)\nConventional 0.1776(5) 0.1707(39) 0.1243(174) 0.0204 (64) ","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"The conventional algorithm is not ergodic anymore for s=4delta, the acceptance ratio to update x is about 015, while the normalization algorithm becomes non ergodic for s=5delta. So the latter is slightly more stable.","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"<!– The code are ![[test.jl]] for the normalization approach and ![[test2.jl]] for the conventional approach. –>","category":"page"},{"location":"man/important_sampling/","page":"Important Sampling","title":"Important Sampling","text":"Reference:  [1] Wang, B.Z., Hou, P.C., Deng, Y., Haule, K. and Chen, K., Fermionic sign structure of high-order Feynman diagrams in a many-fermion system. Physical Review B, 103, 115141 (2021).","category":"page"},{"location":"lib/greenfunc/#Green's-Function","page":"Green's Function","title":"Green's Function","text":"","category":"section"},{"location":"lib/greenfunc/","page":"Green's Function","title":"Green's Function","text":"Modules = [NumericalEFT.GreenFunc]","category":"page"},{"location":"lib/greenfunc/#NumericalEFT.GreenFunc.Green2DLR","page":"Green's Function","title":"NumericalEFT.GreenFunc.Green2DLR","text":"Green's function with two external legs that has in-built Discrete Lehmann Representation. #Parameters:\n\n'T': type of data\n'TType': type of time domain, TType<:TimeDomain\n'TGT': type of time grid\n'SGT': type of space grid\n\n#Members:\n\n'name': Name of green's function\n'color': Number of different species of Green's function (such as different spin values)\n'dlrGrid': In-built Discrete Lehmann Representation\n'timeGrid': Time or Frequency grid\n'spaceType': Whether the Green's function is in coordinate space/momentum space\n'spaceGrid': Coordinate or momentum grid\n'instant': Instantaneous part of Green's function that is proportional to δ(τ) in τ space.\n'dynamic': Dynamic part of Green's function\n'instantError': Error of instantaneous part\n'dynamicError': Error of dynamic part\n\n\n\n\n\n","category":"type"},{"location":"lib/greenfunc/#NumericalEFT.GreenFunc.dynamic-Union{Tuple{SM}, Tuple{TM}, Tuple{SGT}, Tuple{TGT}, Tuple{TT}, Tuple{DT}, Tuple{Green2DLR{DT, TT, TGT, SGT}, Any, Any, Int64, Int64, TM, SM}} where {DT, TT, TGT<:NumericalEFT.CompositeGrids.SimpleG.AbstractGrid, SGT<:NumericalEFT.CompositeGrids.SimpleG.AbstractGrid, TM, SM}","page":"Green's Function","title":"NumericalEFT.GreenFunc.dynamic","text":"function dynamic(green::Green2DLR{DT,TT,TGT,SGT}, time, space, color1::Int, color2::Int, timeMethod::TM , spaceMethod::SM) where {DT,TT,TGT<:CompositeGrids.AbstractGrid,SGT<:CompositeGrids.AbstractGrid,TM,SM}\n\nFind value of Green's function's dynamic part at given color and k/x by interpolation. Interpolation method is by default depending on the grid, but could also be chosen to be linear.\n\n#Argument\n\n'green': Green's function\n'time': Target τ/ω_n point\n'space': Target k/x point\n'color1': Target color1\n'color2': Target color2\n'timeMethod': Method of interpolation for time\n'spaceMethod': Method of interpolation for space \n\n\n\n\n\n","category":"method"},{"location":"lib/greenfunc/#NumericalEFT.GreenFunc.instant-Union{Tuple{SM}, Tuple{SGT}, Tuple{TGT}, Tuple{TT}, Tuple{DT}, Tuple{Green2DLR{DT, TT, TGT, SGT}, Any, Int64}, Tuple{Green2DLR{DT, TT, TGT, SGT}, Any, Int64, Int64}} where {DT, TT, TGT, SGT, SM}","page":"Green's Function","title":"NumericalEFT.GreenFunc.instant","text":"function instant(green::Green2DLR{DT,TT,TGT,SGT}, space, color1::Int, color2::Int=color1; spaceMethod::SM = DEFAULTINTERP) where {DT,TT,TGT,SGT,SM}\n\nFind value of Green's function's instant part at given color and k/x by interpolation. Interpolation method is by default depending on the grid, but could also be chosen to be linear.\n\n#Argument\n\n'green': Green's function\n'space': Target k/x point\n'color1': Target color1\n'color2': Target color2\n'spaceMethod': Method of interpolation for space. \n\n\n\n\n\n","category":"method"},{"location":"lib/greenfunc/#NumericalEFT.GreenFunc.toDLR-Tuple{Green2DLR}","page":"Green's Function","title":"NumericalEFT.GreenFunc.toDLR","text":"function toDLR(green::Green2DLR)\n\nConvert Green's function to dlr space.\n\n#Arguements\n\n'green': Original Green's function\n\n\n\n\n\n","category":"method"},{"location":"lib/greenfunc/#NumericalEFT.GreenFunc.toMatFreq","page":"Green's Function","title":"NumericalEFT.GreenFunc.toMatFreq","text":"function toMatFreq(green::Green2DLR, targetGrid =  green.dlrGrid.n)\n\nConvert Green's function to matfreq space by Fourier transform. If green is already in matfreq space then it will be interpolated to the new grid.\n\n#Arguements\n\n'green': Original Green's function\n'targetGrid': Grid of outcome Green's function. Default: DLR n grid\n\n\n\n\n\n","category":"function"},{"location":"lib/greenfunc/#NumericalEFT.GreenFunc.toTau","page":"Green's Function","title":"NumericalEFT.GreenFunc.toTau","text":"function toTau(green::Green2DLR, targetGrid =  green.dlrGrid.τ)\n\nConvert Green's function to τ space by Fourier transform. If green is already in τ space then it will be interpolated to the new grid.\n\n#Arguements\n\n'green': Original Green's function\n'targetGrid': Grid of outcome Green's function. Default: DLR τ grid\n\n\n\n\n\n","category":"function"},{"location":"lib/atom/#Atom","page":"Atom","title":"Atom","text":"","category":"section"},{"location":"lib/atom/#Many-body-Green's-Functions","page":"Atom","title":"Many-body Green's Functions","text":"","category":"section"},{"location":"lib/atom/","page":"Atom","title":"Atom","text":"Modules = [Atom.Green]","category":"page"},{"location":"lib/atom/#NumericalEFT.Atom.Green.GreenN","page":"Atom","title":"NumericalEFT.Atom.Green.GreenN","text":"GreenN(m::Model, τ, orbital, isfermi=true)\n\nConstruct struct to store the variables to evaulate N-body Green's functions. The leg index is assumed to be [1, 2, 3, ...,2N], where the incoming legs are 1:N, and the outgoing legs are N+1:2N The full Green's function is defined as,\n\nG_2N=leftmathcalT c_2Nc_2N-1c_N+1c^+_Nc^+_2c^+_1right\n\ne.g.,\n\n1->------->-3\n    | G4 |        \n2->------->-4\n\nAll other Green's function are derived from the above full Green's function\n\n#Arguments\n\nm: Model struct\nτ: array stores the imaginary-time of legs\norbital: array stores the orbital/spin of legs\nN: particle number (Note that the leg numebr is 2N)\n\n\n\n\n\n","category":"type"},{"location":"lib/atom/#NumericalEFT.Atom.Green.Model","page":"Atom","title":"NumericalEFT.Atom.Green.Model","text":"Model(H::Operator, c⁺::Vector{Operator}, c⁻::Vector{Operator})\n\nConstruct a model.  All input operators are in the Fock space. But all members of Model struct is in the eigenspace. Operator should be a matrix type.\n\nArguments:\n\nβ: inverse temperature\nH: Hamiltonian in the Fock space\nc⁺, c⁻: creation/anniliation operators for each orbital, all in the Fock space\n\n\n\n\n\n","category":"type"},{"location":"lib/atom/#NumericalEFT.Atom.Green.Gn-Tuple{NumericalEFT.Atom.Green.Model, NumericalEFT.Atom.Green.GreenN}","page":"Atom","title":"NumericalEFT.Atom.Green.Gn","text":"@inline function Gn(m::Model, g::GreenN)\n\nEvaluate the full N-body Green's function.\n\nG_2N=leftmathcalT c_2Nc_2N-1c_N+1c^+_Nc^+_2c^+_1right\n\ne.g.,\n\n1->------->-3\n    | G4 |        \n2->------->-4\n\n\n\n\n\n","category":"method"},{"location":"lib/atom/#NumericalEFT.Atom.Green.Gnc-Tuple{NumericalEFT.Atom.Green.Model, NumericalEFT.Atom.Green.GreenN}","page":"Atom","title":"NumericalEFT.Atom.Green.Gnc","text":"function Gnc(m::Model, g::GreenN)\n\nEvaluate the connected N-body Green's function.\n\ne.g., G4c(43;21) =     1->–––->-4       1->–––->-4     1->–-   –->-4         | G4 |      -                  +         X        2->–––->-3       2->–––->-3     2->–-   –->-3\n\n\n\n\n\n","category":"method"},{"location":"lib/atom/#NumericalEFT.Atom.Green.Heisenberg-Tuple{Matrix{Float64}, Any, Any}","page":"Atom","title":"NumericalEFT.Atom.Green.Heisenberg","text":"Heisenberg(o::Operator, E, τ)\n\nTransform operator o into Heisenberg picture\n\n    exp(Hτ)cdot o cdot exp(-Hτ)\n\n\n\n\n\n","category":"method"},{"location":"lib/atom/#Hilbert-Space","page":"Atom","title":"Hilbert Space","text":"","category":"section"},{"location":"lib/atom/","page":"Atom","title":"Atom","text":"Modules = [Atom.Hilbert]","category":"page"},{"location":"lib/atom/#NumericalEFT.Atom.Hilbert.BinaryFock","page":"Atom","title":"NumericalEFT.Atom.Hilbert.BinaryFock","text":"Fock Basis for fermion and hard-core boson, each site has two states with occupation number 0 and 1 e.g. |101>↓|100>↑ means a 3-site fock state, site 1: one up one down, site 2: no particle, site 3: one down \n\n\n\n\n\n","category":"type"},{"location":"lib/atom/#Exact-Diagonalization-of-Hubbard-Model","page":"Atom","title":"Exact Diagonalization of Hubbard Model","text":"","category":"section"},{"location":"lib/atom/","page":"Atom","title":"Atom","text":"Modules = [Atom.Hubbard]","category":"page"},{"location":"lib/utility/#Utility","page":"Utility","title":"Utility","text":"","category":"section"},{"location":"lib/utility/","page":"Utility","title":"Utility","text":"This module provides the utility subroutines for other DLR modules.","category":"page"},{"location":"lib/utility/","page":"Utility","title":"Utility","text":"Modules = [Lehmann.Interp]","category":"page"},{"location":"readme/MCIntegration/#MCIntegration","page":"MCIntegration","title":"MCIntegration","text":"","category":"section"},{"location":"readme/MCIntegration/","page":"MCIntegration","title":"MCIntegration","text":"Universal Monte Carlo calculator for high-dimensional integral","category":"page"},{"location":"readme/MCIntegration/","page":"MCIntegration","title":"MCIntegration","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"readme/MCIntegration/","page":"MCIntegration","title":"MCIntegration","text":"MCIntegration is Monte Carlo calculator for generic high-dimensional integral. The internal algorithm and some simple benchmarks can be found in the document.","category":"page"},{"location":"readme/MCIntegration/#Quick-start","page":"MCIntegration","title":"Quick start","text":"","category":"section"},{"location":"readme/MCIntegration/","page":"MCIntegration","title":"MCIntegration","text":"The following example demonstrates the basic usage of this package. This code calculates the area of a circle and the volume of a sphere using one Markov chain. The code can be found here.","category":"page"},{"location":"readme/MCIntegration/","page":"MCIntegration","title":"MCIntegration","text":"using MCIntegration\n\n# Define the integrand \nfunction integrand(config)\n    #config.var is a tuple of variable types specified in the second argument of `MCIntegration.Configuration(...)`\n    X = config.var[1]\n    if config.curr == 1 #config.curr is the index of the currently sampled integral by MC\n        return (X[1]^2 + X[2]^2 < 1.0) ? 1.0 : 0.0\n    else\n        return (X[1]^2 + X[2]^2 + X[3]^2 < 1.0) ? 1.0 : 0.0\n    end\nend\n\n# Define how to measure the observable\nfunction measure(config)\n    factor = 1.0 / config.reweight[config.curr]\n    weight = integrand(config)\n    config.observable[config.curr] += weight / abs(weight) * factor #note that config.observable is an array with two elements as discussed below\nend\n\n# MC step of each block\nconst blockStep = 1e6\n\n# Define the types variables, the first argument sets the range, the second argument gives the largest change to the variable in one MC update. see the section [variable](#variable) for more details.\nT = MCIntegration.Continuous([0.0, 1.0], 0.5)\n\n# Define how many (degrees of freedom) variables of each type. \n# For example, [[n1, n2], [m1, m2], ...] means the first integral involves n1 varibales of type 1, and n2 variables of type2, while the second integral involves m1 variables of type 1 and m2 variables of type 2. \ndof = [[2,], [3,]]\n\n# Define the container for the observable. It must be a number or an array-like object. In this case, the observable has two elements, corresponds to the results for the two integrals. \nobs = [0.0, 0.0]\n\n# Define the configuration struct which is container of all kinds of internal data for MC,\n# the second argument is a tuple listing all types of variables, one then specify the degrees of freedom of each variable type in the third argument.  \nconfig = MCIntegration.Configuration(blockStep, (T,), dof, obs)\n\n# perform MC integration. Nblock is the number of independent blocks to estimate the error bar. In MPI mode, the blocks will be sent to different workers. Set \"print=n\" to control the level of information to print.\navg, err = MCIntegration.sample(config, integrand, measure; Nblock = 64, print = 1)\n\n#avg, err are the same shape as obs. In MPI mode, only the root node return meaningful estimates. All other workers simply return nothing\nif isnothing(avg) == false\n    println(\"Circle area: $(avg[1]) +- $(err[1]) (exact: $(π / 4.0))\")\n    println(\"Sphere volume: $(avg[2]) +- $(err[2]) (exact: $(4.0 * π / 3.0 / 8))\")\nend","category":"page"},{"location":"readme/MCIntegration/#Variables","page":"MCIntegration","title":"Variables","text":"","category":"section"},{"location":"readme/MCIntegration/","page":"MCIntegration","title":"MCIntegration","text":"This package defines some common types of variables. Internally, each variable type holds a vector of variables (which is the field named data). The actual number of variables in this vector is called the degrees of freedom (dof). Note that different integral may share the same variable types, but have different degrees of freedom. In the above code example, the integral for the circle area and the sphere volume both involve the variable type Tau. The former has dof=2, while the latter has dof=3. ","category":"page"},{"location":"readme/MCIntegration/","page":"MCIntegration","title":"MCIntegration","text":"Here we briefly list some of the common variables types","category":"page"},{"location":"readme/MCIntegration/","page":"MCIntegration","title":"MCIntegration","text":"Continous([start, end], length scale): continuous real-valued variables with specified range and a length scale. The length scale controls the change of the variable in one MC update. A reasonable estimate of the length scale improves the MC efficiency.\nDiscrete(lower, upper): integer variables in the closed set [lower, upper]. MC will uniformly sample all integers within this range.","category":"page"},{"location":"readme/MCIntegration/","page":"MCIntegration","title":"MCIntegration","text":"More supported variables types can be found in the source code.","category":"page"},{"location":"readme/MCIntegration/#Parallelization","page":"MCIntegration","title":"Parallelization","text":"","category":"section"},{"location":"readme/MCIntegration/","page":"MCIntegration","title":"MCIntegration","text":"MCIntegration supports MPI parallelization. To run your code in MPI mode, simply use the command","category":"page"},{"location":"readme/MCIntegration/","page":"MCIntegration","title":"MCIntegration","text":"mpiexec julia -n #NCPU ./your_script.jl","category":"page"},{"location":"readme/MCIntegration/","page":"MCIntegration","title":"MCIntegration","text":"where #CPU is the number of workers. Internally, the MC sampler will send the blocks (controlled by the argument Nblock, see above example code) to different workers, then collect the estimates in the root node. ","category":"page"},{"location":"readme/MCIntegration/","page":"MCIntegration","title":"MCIntegration","text":"Note that you need to install the package MPI.jl to use the MPI mode. See this link for the instruction on the configuration.","category":"page"},{"location":"readme/MCIntegration/","page":"MCIntegration","title":"MCIntegration","text":"The user essentially doesn't need to write additional code to support the parallelization. The only tricky part is the output: only the function MCIntegratoin.sample of the root node returns meaningful estimates, while other workers simply returns nothing. ","category":"page"},{"location":"readme/MCIntegration/#Q-and-A","page":"MCIntegration","title":"Q&A","text":"","category":"section"},{"location":"readme/MCIntegration/","page":"MCIntegration","title":"MCIntegration","text":"Q: What if the integral result makes no sense?\nA: One possible reason is the reweight factor. It is important for the Markov chain to visit the integrals with the similar frequency. However, the weight of different integrals may be order-of-magnitude different. It is thus important to reweight the integrals. Internally, the MC sampler try to reweight for every config.totalStep/10 MC steps. However, it could fail either 1) the total MC steps is too small so that reweighting doesn't have enough time to show up; ii) the integrals are simply too different, and the internal reweighting subroutine is not smart enough. If 1) is the case, one either increase the total MC steps, or use a smaller reweight step (by setting the argument reweight in MCIntegration.sample). If 2) is the case, one may mannually input an array of reweight factors when initialize the MCIntegration.configuration struct. More details can be found in the source code. ","category":"page"},{"location":"lib/Lehmann/#Discrete-Lehmann-representation","page":"Discrete Lehmann representation","title":"Discrete Lehmann representation","text":"","category":"section"},{"location":"lib/Lehmann/#Main-Module","page":"Discrete Lehmann representation","title":"Main Module","text":"","category":"section"},{"location":"lib/Lehmann/","page":"Discrete Lehmann representation","title":"Discrete Lehmann representation","text":"Modules = [Lehmann]","category":"page"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.DLRGrid","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.DLRGrid","text":"struct DLRGrid\n\nDLR grids for imaginary-time/Matsubara frequency correlators\n\n#Members:\n\nisFermi: bool is fermionic or bosonic\nsymmetry: particle-hole symmetric :ph, or particle-hole asymmetric :pha, or :none\nEuv : the UV energy scale of the spectral density \nβ or beta : inverse temeprature\nΛ or lambda: cutoff = UV Energy scale of the spectral density * inverse temperature\nrtol: tolerance absolute error\nsize : number of DLR basis\nω or omega : selected representative real-frequency grid\nn : selected representative Matsubara-frequency grid (integer)\nωn or omegaN : (2n+1)π/β\nτ or tau : selected representative imaginary-time grid\n\n\n\n\n\n","category":"type"},{"location":"lib/Lehmann/#Base.size-Tuple{DLRGrid}","page":"Discrete Lehmann representation","title":"Base.size","text":"Base.size(dlrGrid::DLRGrid) = length(dlrGrid.ω) Base.length(dlrGrid::DLRGrid) = length(dlrGrid.ω) rank(dlrGrid::DLRGrid) = length(dlrGrid.ω)\n\nget the rank of the DLR grid, namely the number of the DLR coefficients.\n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.dlr2matfreq","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.dlr2matfreq","text":"function dlr2matfreq(dlrGrid::DLRGrid, dlrcoeff, nGrid = dlrGrid.n; axis = 1, verbose = true)\n\nDLR representation to Matsubara-frequency representation\n\n#Members:\n\ndlrGrid  : DLRGrid\ndlrcoeff : DLR coefficients\nnGrid    : expected fine Matsubara-freqeuncy grids (integer)\naxis     : Matsubara-frequency axis in the data dlrcoeff\nverbose  : true to print warning information\n\n\n\n\n\n","category":"function"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.dlr2tau","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.dlr2tau","text":"function dlr2tau(dlrGrid::DLRGrid, dlrcoeff, τGrid = dlrGrid.τ; axis = 1, verbose = true)\n\nDLR representation to imaginary-time representation\n\n#Members:\n\ndlrGrid  : DLRGrid\ndlrcoeff : DLR coefficients\nτGrid    : expected fine imaginary-time grids \naxis     : imaginary-time axis in the data dlrcoeff\nverbose  : true to print warning information\n\n\n\n\n\n","category":"function"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.matfreq2dlr","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.matfreq2dlr","text":"function matfreq2dlr(dlrGrid::DLRGrid, green, nGrid = dlrGrid.n; error = nothing, axis = 1, sumrule = nothing, verbose = true)\n\nMatsubara-frequency representation to DLR representation\n\n#Members:\n\ndlrGrid  : DLRGrid struct.\ngreen    : green's function in Matsubara-frequency domain\nnGrid    : the n grid that Green's function is defined on. \nerror    : error the Green's function. \naxis     : the Matsubara-frequency axis in the data green\nsumrule  : enforce the sum rule \nverbose  : true to print warning information\n\n\n\n\n\n","category":"function"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.matfreq2matfreq","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.matfreq2matfreq","text":"function matfreq2matfreq(dlrGrid, green, nNewGrid, nGrid = dlrGrid.n; error = nothing, axis = 1, sumrule = nothing, verbose = true)\n\nFourier transform from Matsubara-frequency to imaginary-time using the DLR representation\n\n#Members:\n\ndlrGrid  : DLRGrid\ngreen    : green's function in Matsubara-freqeuncy repsentation\nnNewGrid : expected fine Matsubara-freqeuncy grids (integer)\nnGrid    : the n grid that Green's function is defined on. \nerror    : error the Green's function. \naxis     : Matsubara-frequency axis in the data green\nsumrule  : enforce the sum rule \nverbose  : true to print warning information\n\n\n\n\n\n","category":"function"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.matfreq2tau","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.matfreq2tau","text":"function matfreq2tau(dlrGrid, green, τNewGrid = dlrGrid.τ, nGrid = dlrGrid.n; error = nothing, axis = 1, sumrule = nothing, verbose = true)\n\nFourier transform from Matsubara-frequency to imaginary-time using the DLR representation\n\n#Members:\n\ndlrGrid  : DLRGrid\ngreen    : green's function in Matsubara-freqeuncy repsentation\nτNewGrid : expected fine imaginary-time grids\nnGrid    : the n grid that Green's function is defined on. \nerror    : error the Green's function. \naxis     : Matsubara-frequency axis in the data green\nsumrule  : enforce the sum rule \nverbose  : true to print warning information\n\n\n\n\n\n","category":"function"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.tau2dlr","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.tau2dlr","text":"function tau2dlr(dlrGrid::DLRGrid, green, τGrid = dlrGrid.τ; error = nothing, axis = 1, sumrule = nothing, verbose = true)\n\nimaginary-time domain to DLR representation\n\n#Members:\n\ndlrGrid  : DLRGrid struct.\ngreen    : green's function in imaginary-time domain.\nτGrid    : the imaginary-time grid that Green's function is defined on. \nerror    : error the Green's function. \naxis     : the imaginary-time axis in the data green.\nsumrule  : enforce the sum rule \nverbose  : true to print warning information\n\n\n\n\n\n","category":"function"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.tau2matfreq","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.tau2matfreq","text":"function tau2matfreq(dlrGrid, green, nNewGrid = dlrGrid.n, τGrid = dlrGrid.τ; error = nothing, axis = 1, sumrule = nothing, verbose = true)\n\nFourier transform from imaginary-time to Matsubara-frequency using the DLR representation\n\n#Members:\n\ndlrGrid  : DLRGrid\ngreen    : green's function in imaginary-time domain\nnNewGrid : expected fine Matsubara-freqeuncy grids (integer)\nτGrid    : the imaginary-time grid that Green's function is defined on. \nerror    : error the Green's function. \naxis     : the imaginary-time axis in the data green\nsumrule  : enforce the sum rule \nverbose  : true to print warning information\n\n\n\n\n\n","category":"function"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.tau2tau","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.tau2tau","text":"function tau2tau(dlrGrid, green, τNewGrid, τGrid = dlrGrid.τ; error = nothing, axis = 1, sumrule = nothing, verbose = true)\n\nInterpolation from the old imaginary-time grid to a new grid using the DLR representation\n\n#Members:\n\ndlrGrid  : DLRGrid\ngreen    : green's function in imaginary-time domain\nτNewGrid : expected fine imaginary-time grids\nτGrid    : the imaginary-time grid that Green's function is defined on. \nerror    : error the Green's function. \naxis     : the imaginary-time axis in the data green\nsumrule  : enforce the sum rule \nverbose  : true to print warning information\n\n\n\n\n\n","category":"function"},{"location":"lib/Lehmann/#Spectral-functions","page":"Discrete Lehmann representation","title":"Spectral functions","text":"","category":"section"},{"location":"lib/Lehmann/","page":"Discrete Lehmann representation","title":"Discrete Lehmann representation","text":"This module defines the kernels of Lehmann representation for different particles and symmetries.","category":"page"},{"location":"lib/Lehmann/","page":"Discrete Lehmann representation","title":"Discrete Lehmann representation","text":"Modules = [Lehmann.Spectral]","category":"page"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Spectral","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Spectral","text":"Spectral representation related functions\n\n\n\n\n\n","category":"module"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Spectral.boseEinstein-Union{Tuple{T}, Tuple{T, T}} where T<:AbstractFloat","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Spectral.boseEinstein","text":"boseEinstein(ω)\n\nCompute the Fermi Dirac function. Assume k_B Thbar=1\n\nf(ω) = 1(e^ωβ-1)\n\nArguments\n\nω: frequency\nβ: the inverse temperature \n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Spectral.density-Union{Tuple{T}, Tuple{Bool, T, T}} where T<:AbstractFloat","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Spectral.density","text":"density(isFermi::Bool, ω, β)\n\nCompute the imaginary-time kernel of different type. Assume k_B Thbar=1\n\nArguments\n\nisFermi: fermionic or bosonic\nω: energy \nβ: the inverse temperature \n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Spectral.fermiDirac-Union{Tuple{T}, Tuple{T, T}} where T<:AbstractFloat","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Spectral.fermiDirac","text":"fermiDirac(ω)\n\nCompute the Fermi Dirac function. Assume k_B Thbar=1\n\nf(ω) = 1(e^ωβ+1)\n\nArguments\n\nω: frequency\nβ: the inverse temperature \n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Spectral.kernelBoseT-Union{Tuple{T}, Tuple{T, T, T}} where T<:AbstractFloat","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Spectral.kernelBoseT","text":"kernelBoseT(τ, ω, β)\n\nCompute the imaginary-time bosonic kernel. Machine accuracy ~eps(g) is guaranteed``\n\ng(τ0) = e^-ωτ(1-e^-ωβ) g(τ0) = -e^-ωτ(1-e^ωβ)\n\nArguments\n\nτ: the imaginary time, must be (-β, β]\nω: frequency\nβ: the inverse temperature \n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Spectral.kernelBoseT_PH-Union{Tuple{T}, Tuple{T, T}, Tuple{T, T, Any}} where T<:AbstractFloat","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Spectral.kernelBoseT_PH","text":"kernelBoseT_PH(τ, ω, β)\n\nCompute the imaginary-time kernel for correlation function O(τ)O(0). Machine accuracy ~eps(C) is guaranteed``\n\nK(τ) = e^-ωτ+e^-ω(β-τ)\n\nArguments\n\nτ: the imaginary time, must be (-β, β]\nω: frequency, ω>=0\nβ: the inverse temperature \n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Spectral.kernelBoseT_PHA-Union{Tuple{T}, Tuple{T, T, T}} where T<:AbstractFloat","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Spectral.kernelBoseT_PHA","text":"kernelBoseT_PHA(τ, ω, β)\n\nCompute the imaginary-time kernel for correlation function O(τ)O(0). Machine accuracy ~eps(C) is guaranteed``\n\nK(τ) = e^-ωτ-e^-ω(β-τ)\n\nArguments\n\nτ: the imaginary time, must be (0, β]\nω: frequency, ω>=0\nβ: the inverse temperature \n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Spectral.kernelBoseT_regular-Union{Tuple{T}, Tuple{T, T, T}} where T<:AbstractFloat","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Spectral.kernelBoseT_regular","text":"kernelBoseT_regular(τ, ω, β)\n\nCompute the imaginary-time bosonic kernel with a regulator near ω=0. Machine accuracy ~eps(g) is guaranteed``\n\ng(τ0) = e^-ωτ(1+e^-ωβ) g(τ0) = e^-ωτ(1+e^ωβ)\n\nArguments\n\nτ: the imaginary time, must be (-β, β]\nω: frequency\nβ: the inverse temperature \n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Spectral.kernelBoseΩ-Union{Tuple{T}, Tuple{Int64, T, T}} where T<:AbstractFloat","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Spectral.kernelBoseΩ","text":"kernelBoseΩ(n::Int, ω::T, β::T) where {T <: AbstractFloat}\n\nCompute the bosonic kernel with Matsubara frequency.\n\ng(iω_n) = -1(iω_n-ω)\n\nwhere ω_n=2nπβ. The convention here is consist with the book \"Quantum Many-particle Systems\" by J. Negele and H. Orland, Page 95\n\nArguments\n\nn: index of the Matsubara frequency\nω: energy \nβ: the inverse temperature \n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Spectral.kernelBoseΩ_PH-Union{Tuple{T}, Tuple{Int64, T, T}} where T<:AbstractFloat","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Spectral.kernelBoseΩ_PH","text":"kernelBoseΩ_PH(n::Int, ω::T, β::T) where {T <: AbstractFloat}\n\nCompute the Matsubara-frequency kernel for a correlator O(τ)O(0)_iω_n.\n\nK(iω_n) = frac2ωω^2+ω_n^2(1-e^-ωβ)\n\nwhere ω_n=2nπβ. The convention here is consist with the book \"Quantum Many-particle Systems\" by J. Negele and H. Orland, Page 95\n\nArguments\n\nn: index of the Matsubara frequency\nω: energy \nβ: the inverse temperature \n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Spectral.kernelBoseΩ_PHA-Union{Tuple{T}, Tuple{Int64, T, T}} where T<:AbstractFloat","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Spectral.kernelBoseΩ_PHA","text":"kernelBoseΩ_PHA(n::Int, ω::T, β::T) where {T <: AbstractFloat}\n\nCompute the Matsubara-frequency kernel for a anormalous fermionic correlator with particle-hole symmetry.\n\nK(iω_n) = -frac2iω_nω^2+ω_n^2(1-e^-ωβ)\n\nwhere ω_n=2nπβ. The convention here is consist with the book \"Quantum Many-particle Systems\" by J. Negele and H. Orland, Page 95\n\nArguments\n\nn: index of the fermionic Matsubara frequency\nω: energy \nβ: the inverse temperature \n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Spectral.kernelBoseΩ_regular-Union{Tuple{T}, Tuple{Int64, T, T}} where T<:AbstractFloat","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Spectral.kernelBoseΩ_regular","text":"kernelBoseΩ_regular(n::Int, ω::T, β::T) where {T <: AbstractFloat}\n\nCompute the bosonic kernel in Matsubara frequency with a regulartor near ω=0\n\ng(iω_n) = -(1-e^-ωβ)(1+e^-ωβ)(iω_n-ω)\n\nwhere ω_n=2nπβ. The convention here is consist with the book \"Quantum Many-particle Systems\" by J. Negele and H. Orland, Page 95\n\nArguments\n\nn: index of the Matsubara frequency\nω: energy \nβ: the inverse temperature \n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Spectral.kernelFermiT-Union{Tuple{T}, Tuple{T, T, T}} where T<:AbstractFloat","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Spectral.kernelFermiT","text":"kernelFermiT(τ, ω, β)\n\nCompute the imaginary-time fermionic kernel.  Machine accuracy ~eps(g) is guaranteed``\n\ng(τ0) = e^-ωτ(1+e^-ωβ) g(τ0) = -e^-ωτ(1+e^ωβ)\n\nArguments\n\nτ: the imaginary time, must be (-β, β]\nω: frequency\nβ: the inverse temperature \n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Spectral.kernelFermiT_PH-Union{Tuple{T}, Tuple{T, T}, Tuple{T, T, Any}} where T<:AbstractFloat","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Spectral.kernelFermiT_PH","text":"kernelFermiT_PH(τ, ω, β)\n\nCompute the imaginary-time kernel for correlation function O(τ)O(0). Machine accuracy ~eps(C) is guaranteed``\n\nK(τ) = e^-ωτ+e^-ω(β-τ)\n\nArguments\n\nτ: the imaginary time, must be (-β, β]\nω: frequency, ω>=0\nβ: the inverse temperature \n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Spectral.kernelFermiT_PHA-Union{Tuple{T}, Tuple{T, T, T}} where T<:AbstractFloat","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Spectral.kernelFermiT_PHA","text":"kernelFermiT_PHA(τ, ω, β)\n\nCompute the imaginary-time kernel for correlation function O(τ)O(0). Machine accuracy ~eps(C) is guaranteed``\n\nK(τ) = e^-ωτ-e^-ω(β-τ)\n\nArguments\n\nτ: the imaginary time, must be (0, β]\nω: frequency, ω>=0\nβ: the inverse temperature \n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Spectral.kernelFermiΩ-Union{Tuple{T}, Tuple{Int64, T, T}} where T<:AbstractFloat","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Spectral.kernelFermiΩ","text":"kernelFermiΩ(n::Int, ω::T, β::T) where {T <: AbstractFloat}\n\nCompute the fermionic kernel with Matsubara frequency.\n\ng(iω_n) = -1(iω_n-ω)\n\nwhere ω_n=(2n+1)πβ. The convention here is consist with the book \"Quantum Many-particle Systems\" by J. Negele and H. Orland, Page 95\n\nArguments\n\nn: index of the Matsubara frequency\nω: energy \nβ: the inverse temperature \n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Spectral.kernelFermiΩ_PH-Union{Tuple{T}, Tuple{Int64, T, T}} where T<:AbstractFloat","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Spectral.kernelFermiΩ_PH","text":"kernelFermiΩ_PH(n::Int, ω::T, β::T) where {T <: AbstractFloat}\n\nCompute the Matsubara-frequency kernel for a correlator O(τ)O(0)_iω_n.\n\nK(iω_n) = -frac2iω_nω^2+ω_n^2(1+e^-ωβ)\n\nwhere ω_n=(2n+1)πβ. The convention here is consist with the book \"Quantum Many-particle Systems\" by J. Negele and H. Orland, Page 95\n\nArguments\n\nn: index of the Matsubara frequency\nω: energy \nβ: the inverse temperature \n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Spectral.kernelFermiΩ_PHA-Union{Tuple{T}, Tuple{Int64, T, T}} where T<:AbstractFloat","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Spectral.kernelFermiΩ_PHA","text":"kernelFermiΩ_PHA(n::Int, ω::T, β::T) where {T <: AbstractFloat}\n\nCompute the Matsubara-frequency kernel for a anormalous fermionic correlator with particle-hole symmetry.\n\nK(iω_n) = frac2ωω^2+ω_n^2(1+e^-ωβ)\n\nwhere ω_n=(2n+1)πβ. The convention here is consist with the book \"Quantum Many-particle Systems\" by J. Negele and H. Orland, Page 95\n\nArguments\n\nn: index of the fermionic Matsubara frequency\nω: energy \nβ: the inverse temperature \n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Spectral.kernelT-Union{Tuple{T}, Tuple{Any, Any, AbstractVector{T}, AbstractVector{T}, T}, Tuple{Any, Any, AbstractVector{T}, AbstractVector{T}, T, Bool}} where T<:AbstractFloat","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Spectral.kernelT","text":"kernelT(isFermi, symmetry, τGrid::AbstractVector{T}, ωGrid::AbstractVector{T}, β::T, regularized::Bool = false; type = T) where {T<:AbstractFloat}\n\nCompute kernel with given τ and ω grids.\n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Spectral.kernelT-Union{Tuple{symmetry}, Tuple{isFermi}, Tuple{T}, Tuple{Val{isFermi}, Val{symmetry}, T, T, T}, Tuple{Val{isFermi}, Val{symmetry}, T, T, T, Bool}} where {T<:AbstractFloat, isFermi, symmetry}","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Spectral.kernelT","text":"kernelT(::Val{isFermi}, ::Val{symmetry}, τ::T, ω::T, β::T, regularized::Bool = false) where {T<:AbstractFloat}\n\nCompute the imaginary-time kernel of different type.\n\nArguments\n\nisFermi: fermionic or bosonic. It should be wrapped as Val(isFermi).\nsymmetry: :ph, :pha, or :none. It should be wrapped as Val(symmetry).\nτ: the imaginary time, must be (-β, β]\nω: energy \nβ: the inverse temperature \nregularized: use regularized kernel or not\n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Spectral.kernelΩ-Union{Tuple{T}, Tuple{Any, Any, Vector{Int64}, Vector{T}, T}, Tuple{Any, Any, Vector{Int64}, Vector{T}, T, Bool}} where T<:AbstractFloat","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Spectral.kernelΩ","text":"kernelΩ(isFermi, symmetry, nGrid::Vector{Int}, ωGrid::Vector{T}, β::T, regularized::Bool = false; type = Complex{T}) where {T<:AbstractFloat}\n\nCompute kernel matrix with given ωn (integer!) and ω grids.\n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Spectral.kernelΩ-Union{Tuple{symmetry}, Tuple{isFermi}, Tuple{T}, Tuple{Val{isFermi}, Val{symmetry}, Int64, T, T}, Tuple{Val{isFermi}, Val{symmetry}, Int64, T, T, Bool}} where {T<:AbstractFloat, isFermi, symmetry}","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Spectral.kernelΩ","text":"kernelΩ(::Val{isFermi}, ::Val{symmetry}, n::Int, ω::T, β::T, regularized::Bool = false) where {T<:AbstractFloat}\n\nCompute the imaginary-time kernel of different type. Assume k_B Thbar=1\n\nArguments\n\nisFermi: fermionic or bosonic. It should be wrapped as Val(isFermi).\nsymmetry: :ph, :pha, or :none. It should be wrapped as Val(symmetry).\nn: index of the Matsubara frequency\nω: energy \nβ: the inverse temperature \nregularized: use regularized kernel or not\n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#Sample-Green's-Function-Builder","page":"Discrete Lehmann representation","title":"Sample Green's Function Builder","text":"","category":"section"},{"location":"lib/Lehmann/","page":"Discrete Lehmann representation","title":"Discrete Lehmann representation","text":"This module provides subroutines to generate Green's function samples. ","category":"page"},{"location":"lib/Lehmann/","page":"Discrete Lehmann representation","title":"Discrete Lehmann representation","text":"Modules = [Lehmann.Sample]","category":"page"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Sample.MultiPole","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Sample.MultiPole","text":"MultiPole(β, isFermi::Bool, symmetry::Symbol, Grid, type::Symbol, poles, regularized::Bool = true)\nMultiPole(dlr, type::Symbol, poles, Grid = dlrGrid(dlr, type); regularized::Bool = true)\n\nGenerate Green's function from a spectral density with delta peaks specified by the argument poles.  Return the function on Grid and the systematic error.\n\n#Arguments\n\ndlr: dlrGrid struct\nβ : inverse temperature\nisFermi: is fermionic or bosonic\nsymmetry: particle-hole symmetric :ph, particle-hole antisymmetric :pha, or :none\nGrid: grid to evalute on\ntype: imaginary-time with :τ, or Matsubara-frequency with :n\npoles: a list of frequencies for the delta functions\nregularized: use regularized bosonic kernel if symmetry = :none\n\n\n\n\n\n","category":"function"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Sample.SemiCircle","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Sample.SemiCircle","text":"SemiCircle(Euv, β, isFermi::Bool, Grid, type::Symbol, symmetry::Symbol = :none; rtol = nothing, degree = 24, regularized::Bool = true)\nSemiCircle(dlr, type::Symbol, Grid = dlrGrid(dlr, type); degree = 24, regularized::Bool = true)\n\nGenerate Green's function from a semicircle spectral density.  Return the function on Grid and the systematic error.\n\n#Arguments\n\ndlr: dlrGrid struct\nEuv : ultraviolet energy cutoff\nβ : inverse temperature\nisFermi: is fermionic or bosonic\nGrid: grid to evalute on\ntype: imaginary-time with :τ, or Matsubara-frequency with :n\nsymmetry: particle-hole symmetric :ph, particle-hole antisymmetric :pha, or :none\nrtol: accuracy to achieve\ndegree: polynomial degree for integral\nregularized: use regularized bosonic kernel if symmetry = :none\n\n\n\n\n\n","category":"function"},{"location":"lib/Lehmann/#Discrete-DLR-builder","page":"Discrete Lehmann representation","title":"Discrete DLR builder","text":"","category":"section"},{"location":"lib/Lehmann/","page":"Discrete Lehmann representation","title":"Discrete Lehmann representation","text":"This module provides a DLR builder based on the conventional QR algorithm. ","category":"page"},{"location":"lib/Lehmann/","page":"Discrete Lehmann representation","title":"Discrete Lehmann representation","text":"Modules = [Lehmann.Discrete]","category":"page"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Discrete.build","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Discrete.build","text":"function build(dlrGrid, print::Bool = true)     Construct discrete Lehmann representation\n\n#Arguments:\n\ndlrGrid: struct that contains the information to construct the DLR grid. The following entries are required:  Λ: the dimensionless scale β*Euv, rtol: the required relative accuracy, isFermi: fermionic or bosonic, symmetry: particle-hole symmetry/antisymmetry or none\nprint: print the internal information or not\n\n\n\n\n\n","category":"function"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Discrete.preciseKernelT","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Discrete.preciseKernelT","text":"function preciseKernelT(dlrGrid, τ, ω, print::Bool = true)\n\nCalculate the kernel matrix(τ, ω) for given τ, ω grids\n\nArguments\n\nτ: a CompositeChebyshevGrid struct or a simple one-dimensional array\nω: a CompositeChebyshevGrid struct or a simple one-dimensional array\nprint: print information or not\n\n\n\n\n\n","category":"function"},{"location":"lib/Lehmann/#Functional-DLR-builder","page":"Discrete Lehmann representation","title":"Functional DLR builder","text":"","category":"section"},{"location":"lib/Lehmann/","page":"Discrete Lehmann representation","title":"Discrete Lehmann representation","text":"This module provides a DLR builder based on a functional QR algorithm. It can generate DLR at extremely low temperature.","category":"page"},{"location":"lib/Lehmann/","page":"Discrete Lehmann representation","title":"Discrete Lehmann representation","text":"Modules = [Lehmann.Functional]","category":"page"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Functional.build","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Functional.build","text":"function build(dlrGrid, print::Bool = true)     Construct discrete Lehmann representation\n\n#Arguments:\n\ndlrGrid: struct that contains the information to construct the DLR grid. The following entries are required:  Λ: the dimensionless scale β*Euv, rtol: the required relative accuracy, isFermi: fermionic or bosonic, symmetry: particle-hole symmetry/antisymmetry or none\nprint: print the internal information or not\n\n\n\n\n\n","category":"function"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Functional.kernel-Tuple{BigFloat}","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Functional.kernel","text":"(1-exp(-Λ*x)/x\n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Functional.mGramSchmidt-Tuple{Any, Any, BigFloat}","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Functional.mGramSchmidt","text":"modified Gram-Schmidt process\n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Functional.projKernel-Tuple{Any, Any}","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Functional.projKernel","text":"<K(gi), K(gj)>\n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Functional.projPHA_τ-Tuple{BigFloat, BigFloat, BigFloat}","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Functional.projPHA_τ","text":"particle-hole asymmetric kernel: K(ω, τ)=e^{-ωτ}-e^{-ω(β-τ)}\n\nKK=int_0^{Λ} dτ K(ω,t1)*K(ω2,t2)=(1-e^{t1+t2})/(t1+t2)+(1-e^{2β-t1-t2})/(2β-t1-t2)-(1-e^{β+t1-t2})/(β+t1-t2)-(1-e^{β-t1+t2})/(β-t1+t2)\n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Functional.projPHA_ω-Tuple{BigFloat, BigFloat, BigFloat}","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Functional.projPHA_ω","text":"particle=hole asymmetric kernel: K(ω, τ)=e^{-ωτ}-e^{-ω(β-τ)}\n\nKK=int_0^{1/2} dτ K(ω1,τ)*K(ω2,τ)=(1-e^{ω1+ω2})/(ω1+ω2)-(e^{-ω2}-e^{-ω1})/(ω1-ω2)\n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Functional.projPH_τ-Tuple{BigFloat, BigFloat, BigFloat}","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Functional.projPH_τ","text":"particle-hole symmetric kernel: K(ω, τ)=e^{-ωτ}+e^{-ω(β-τ)}\n\nKK=int_0^{Λ} dτ K(ω,t1)*K(ω2,t2)=(1-e^{t1+t2})/(t1+t2)+(1-e^{2β-t1-t2})/(2β-t1-t2)+(1-e^{β+t1-t2})/(β+t1-t2)+(1-e^{β-t1+t2})/(β-t1+t2)\n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Functional.projPH_ω-Tuple{BigFloat, BigFloat, BigFloat}","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Functional.projPH_ω","text":"particle-hole symmetric kernel: K(ω, τ)=e^{-ωτ}+e^{-ω(β-τ)}\n\nKK=int_0^{1/2} dτ K(ω1,τ)*K(ω2,τ)=(1-e^{ω1+ω2})/(ω1+ω2)+(e^{-ω2}-e^{-ω1})/(ω1-ω2)\n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Functional.projqq-Tuple{Any, Vector{BigFloat}, Vector{BigFloat}}","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Functional.projqq","text":"q1=sumj cj Kj q2=sumk dk Kk return <q1, q2> = sumjk cj*dk <Kj, K_k>\n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#Utility","page":"Discrete Lehmann representation","title":"Utility","text":"","category":"section"},{"location":"lib/Lehmann/","page":"Discrete Lehmann representation","title":"Discrete Lehmann representation","text":"This module provides the utility subroutines for other DLR modules.","category":"page"},{"location":"lib/Lehmann/","page":"Discrete Lehmann representation","title":"Discrete Lehmann representation","text":"Modules = [Lehmann.Interp]","category":"page"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Interp.barycheb-NTuple{5, Any}","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Interp.barycheb","text":"function barycheb(n, x, f, wc, xc)\n\nBarycentric Lagrange interpolation at Chebyshev nodes Reference: Berrut, J.P. and Trefethen, L.N., 2004. Barycentric lagrange interpolation. SIAM review, 46(3), pp.501-517.\n\nArguments\n\nn: order of the Chebyshev interpolation\nx: coordinate to interpolate\nf: array of size n, function at the Chebyshev nodes\nwc: array of size n, Barycentric Lagrange interpolation weights\nxc: array of size n, coordinates of Chebyshev nodes\n\nReturns\n\nInterpolation result\n\n\n\n\n\n","category":"method"},{"location":"lib/Lehmann/#NumericalEFT.Lehmann.Interp.barychebinit-Tuple{Any}","page":"Discrete Lehmann representation","title":"NumericalEFT.Lehmann.Interp.barychebinit","text":"barychebinit(n)\n\nGet Chebyshev nodes of first kind and corresponding barycentric Lagrange interpolation weights.  Reference: Berrut, J.P. and Trefethen, L.N., 2004. Barycentric lagrange interpolation. SIAM review, 46(3), pp.501-517.\n\nArguments\n\nn: order of the Chebyshev interpolation\n\nReturns\n\nChebyshev nodes\nBarycentric Lagrange interpolation weights\n\n\n\n\n\n","category":"method"},{"location":"readme/Lehmann/","page":"Lehmann","title":"Lehmann","text":"CurrentModule = Lehmann","category":"page"},{"location":"readme/Lehmann/#Lehmann.jl","page":"Lehmann","title":"Lehmann.jl","text":"","category":"section"},{"location":"readme/Lehmann/","page":"Lehmann","title":"Lehmann","text":"Documentation for Lehmann.jl.","category":"page"},{"location":"readme/Lehmann/#Discrete-Lehmann-Representation-(DLR)","page":"Lehmann","title":"Discrete Lehmann Representation (DLR)","text":"","category":"section"},{"location":"readme/Lehmann/","page":"Lehmann","title":"Lehmann","text":"This package provides subroutines to represent and manuipulate Green's functions in the imaginary-time or in the Matsubara-frequency domain. ","category":"page"},{"location":"readme/Lehmann/","page":"Lehmann","title":"Lehmann","text":"Imaginary-time Green's functions encode the thermodynamic properites of quantum many-body systems. At low temperature, they are typically very singular and hard to deal with in numerical calculations. ","category":"page"},{"location":"readme/Lehmann/","page":"Lehmann","title":"Lehmann","text":"The physical Green's functions always have the analytic structure specified by the Lehmann representation,","category":"page"},{"location":"readme/Lehmann/","page":"Lehmann","title":"Lehmann","text":"G(tau)=-int_-infty^infty K(tau omega) rho(omega) d omega","category":"page"},{"location":"readme/Lehmann/","page":"Lehmann","title":"Lehmann","text":"where tau is the imaginary time, omega is the real frequency. While the spectral density rho(omega) depends on the details of the quantum many-body system, the convolution kernel K(tau omega) is universal and is roughly an exponential function exp(-omega tau). ","category":"page"},{"location":"readme/Lehmann/","page":"Lehmann","title":"Lehmann","text":"If one cares about the thermodynamic quantities, one only needs to manipulate the Green's functions. Then DLR allows us to represent the Green's function up to an accuracy epsilon with a fake spectral function only has a handful poles,","category":"page"},{"location":"readme/Lehmann/","page":"Lehmann","title":"Lehmann","text":"G(tau) approx G_mathrmDLR(tau) equiv sum_k=1^r Kleft(tau omega_kright) widehatrho_k","category":"page"},{"location":"readme/Lehmann/","page":"Lehmann","title":"Lehmann","text":"where r is called the rank of DLR. It is of the order,","category":"page"},{"location":"readme/Lehmann/","page":"Lehmann","title":"Lehmann","text":"r sim log fracE_uvT log frac1ϵ","category":"page"},{"location":"readme/Lehmann/","page":"Lehmann","title":"Lehmann","text":"where T is the temperature, E_uv is the ultraviolet energy scale beyond which the physical spectral function decays away, epsilon is the accuracy.","category":"page"},{"location":"readme/Lehmann/","page":"Lehmann","title":"Lehmann","text":"The hallmarks of DLR are the following,","category":"page"},{"location":"readme/Lehmann/","page":"Lehmann","title":"Lehmann","text":"In typical use cases, only dozens of coefficients are needed to represent the Green's functions up to the accuracy 1e-10.\nThe basis functions K(tau omega_i) are simple, explicit and analytic functions. It makes the Green's function manipulation (interpolation, fourier transform, convolution) rather simple in DLR.","category":"page"},{"location":"readme/Lehmann/#Main-Features","page":"Lehmann","title":"Main Features","text":"","category":"section"},{"location":"readme/Lehmann/","page":"Lehmann","title":"Lehmann","text":"We provide the following components to ease the numerical manipulation of the Green's functions:","category":"page"},{"location":"readme/Lehmann/","page":"Lehmann","title":"Lehmann","text":"Algorithms to generate the discrete Lehamnn representation (DLR), which is a generic and compact representation of Green's functions proposed in the Ref. [1]. In this package, two algorithms are provided: one algorithm is based on conventional QR algorithm, another is based on a functional QR algorithm. The latter extends DLR to extremely low temperature.\nDedicated DLR for Green's functions with the particle-hole symmetry (e.g. phonon propagator) or with the particle-hole antisymmetry (e.g. superconductor gap function).\nFast and accurate Fourier transform between the imaginary-time domain and the Matsubara-frequency domain with a cost sim O(log(1T)log(1ϵ)) and an accuracy ~100ϵ.\nFast and accurate Green's function interpolation with a cost sim O(log(1T)log(1ϵ)) and an accuracy ~100ϵ.\nFit a Green's function with noisy.","category":"page"},{"location":"readme/Lehmann/#Reference","page":"Lehmann","title":"Reference","text":"","category":"section"},{"location":"readme/Lehmann/","page":"Lehmann","title":"Lehmann","text":"If this library helps you to create software or publications, please let us know, and cite","category":"page"},{"location":"readme/Lehmann/","page":"Lehmann","title":"Lehmann","text":"[1] \"Discrete Lehmann representation of imaginary time Green's functions\", Jason Kaye, Kun Chen, and Olivier Parcollet, arXiv:2107.13094","category":"page"},{"location":"readme/Lehmann/","page":"Lehmann","title":"Lehmann","text":"[2] \"libdlr: Efficient imaginary time calculations using the discrete Lehmann representation\", Jason Kaye and Hugo U.R. Strand, arXiv:2110.06765","category":"page"},{"location":"#NumericalEFT.jl","page":"Home","title":"NumericalEFT.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Numerical effective field theory toolbox for quantum many-body problem.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: codecov)","category":"page"},{"location":"#Motivation","page":"Home","title":"Motivation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Collective modes of quantum many-body systems are often well described by weakly-interacting quantum fields. Effective field theory (EFT) is a framework to systematically study such problems. EFT has been widely used in high-energy physics, nuclear physics and condensed matter physics. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"For quantum material applications, EFTs are often too complicated to calculate with bare hands. Therefore, we are motivated to create a numerical package for such problems.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Potential applications of this package are the electron liquids and superconductors in real materials, chiral EFT in neutron-rich matter, and all kinds of emergent low-energy field theories in lattice models.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package NumericalEFTjl is a collection of loosely coupled components. They are organized in the following infrastructure: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: NumericalEFT)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Most of the components have been published as independent packages, so that user has the freedom to try them separately. The package is in development stage. Many components are still missing. Here we list the components that are ready for applications:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Lehmann.jl: Discrete Lehmann representation (DLR) for imaginary-time/Matsubara frequency Green's function. For a generic Green's function at a temperature T, DLR is capable of representing it up to a given accuracy ϵ with a cost ~ log(1/T)log(1/ϵ), signicantly cheaper than a naive approach with a cost ~ 1/(Tϵ). \nFeynmanDiagram.jl: High-order Feynman diagram builder for general quantum many-body systems. The diagrams are compiled into an expression tree for subsequent efficient evaluations using a MC integrator. It Supports propagator/interaction renormalization, which is important for renormalization group analysis. \nMCIntegration.jl: An adapative Monte Carlo calculator for general high dimensional integral. It is particularly suitable to calculate multiple integrals that are strongly correlated, for example, the Feynman diagrams. \nCompositeGrids.jl: Composite Cheybeshev/Gaussian/logarithmic grid systems for one-dimensional interpolation and integration. It allows the user to combine different grids to represent one highly non-smooth functions.\nGreenFunc.jl: A container for generic Green's functions.\nAtom.jl: A small-scale exact diagonalization solver to calculate the Many-body Green's functions of a small cluster of Hubbard-type atoms.","category":"page"},{"location":"#Questions-and-Contributions","page":"Home","title":"Questions and Contributions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Contributions are very welcome, as are feature requests and suggestions. Please open an issue if you encounter any problems.","category":"page"}]
}
